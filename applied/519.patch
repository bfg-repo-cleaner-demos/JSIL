From 7ac8000a79061d6824e3906eaac0f5b91c23ce91 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Thu, 10 Apr 2014 09:44:23 -0700
Subject: [PATCH 01/10] BCL proxies added.

---
 .gitignore                              |   5 +-
 JSIL.sln                                |   9 +
 JSIL_NoXNA.sln                          |   9 +
 Proxies/BCL/JSIL.Bootstrap.DateTime.cs  | 287 ++++++++++++++++++++++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Linq.cs      | 220 ++++++++++++++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Resources.cs | 107 ++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Text.cs      |  79 +++++++++
 Proxies/BCL/JSIL.Bootstrap.cs           | 246 +++++++++++++++++++++++++++
 Proxies/BCL/JSIL.Core.Reflection.cs     |  18 ++
 Proxies/BCL/JSIL.IO.cs                  |  84 ++++++++++
 Proxies/BCL/JSIL.Unsafe.cs              |  25 +++
 Proxies/BCL/JSIL.XML.cs                 |  43 +++++
 Proxies/BCL/Properties/AssemblyInfo.cs  |  36 ++++
 Proxies/BCL/Proxies.Bcl.csproj          |  64 +++++++
 14 files changed, 1230 insertions(+), 2 deletions(-)
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.DateTime.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.Linq.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.Resources.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.Text.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.cs
 create mode 100644 Proxies/BCL/JSIL.Core.Reflection.cs
 create mode 100644 Proxies/BCL/JSIL.IO.cs
 create mode 100644 Proxies/BCL/JSIL.Unsafe.cs
 create mode 100644 Proxies/BCL/JSIL.XML.cs
 create mode 100644 Proxies/BCL/Properties/AssemblyInfo.cs
 create mode 100644 Proxies/BCL/Proxies.Bcl.csproj

diff --git a/.gitignore b/.gitignore
index 2e40b14..aea460e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -17,6 +17,7 @@ Proxies/obj
 Proxies/bin
 Proxies/XNA/obj
 Proxies/XNA/bin
+Proxies/BCL/obj
 Examples/simpleray
 Examples/bin
 /bin
@@ -65,8 +66,8 @@ _UpgradeReport_Files
 /Upstream/FFMPEG/*.exe
 /Upstream/FFMPEG/licenses
 /Upstream/OggEnc/*.exe
-/Upstream/XapParse/obj
-/Upstream/XapParse/bin
+/Upstream/xapparse/obj
+/Upstream/xapparse/bin
 Skeletons/*.js
 Corlib/*.js
 Corlib/*.nlp
diff --git a/JSIL.sln b/JSIL.sln
index fc54967..0bb663e 100644
--- a/JSIL.sln
+++ b/JSIL.sln
@@ -46,6 +46,8 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Try", "Try\Try.csproj", "{2
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SmokeTests", "SmokeTests\SmokeTests.csproj", "{99D82424-C7FB-4D78-AEC6-700DE220580F}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Proxies.Bcl", "Proxies\BCL\Proxies.Bcl.csproj", "{261C3CF3-D25E-4F17-8973-5D0F761FE422}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -170,6 +172,13 @@ Global
 		{99D82424-C7FB-4D78-AEC6-700DE220580F}.Release|Any CPU.ActiveCfg = Release|x86
 		{99D82424-C7FB-4D78-AEC6-700DE220580F}.Release|x86.ActiveCfg = Release|x86
 		{99D82424-C7FB-4D78-AEC6-700DE220580F}.Release|x86.Build.0 = Release|x86
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/JSIL_NoXNA.sln b/JSIL_NoXNA.sln
index d5e91b8..95462f4 100644
--- a/JSIL_NoXNA.sln
+++ b/JSIL_NoXNA.sln
@@ -36,6 +36,8 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Proxies.4.0", "Proxies\Prox
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Try", "Try\Try.csproj", "{2869EA5F-86D6-4075-8539-61AA1FE94066}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Proxies.Bcl", "Proxies\BCL\Proxies.Bcl.csproj", "{261C3CF3-D25E-4F17-8973-5D0F761FE422}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -137,6 +139,13 @@ Global
 		{2869EA5F-86D6-4075-8539-61AA1FE94066}.Release|Any CPU.ActiveCfg = Release|x86
 		{2869EA5F-86D6-4075-8539-61AA1FE94066}.Release|x86.ActiveCfg = Release|x86
 		{2869EA5F-86D6-4075-8539-61AA1FE94066}.Release|x86.Build.0 = Release|x86
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/Proxies/BCL/JSIL.Bootstrap.DateTime.cs b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
new file mode 100644
index 0000000..2c32b1f
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
@@ -0,0 +1,287 @@
+ï»¿using System;
+using System.Globalization;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(TimeSpan), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_TimeSpan
+    {
+        [JSExternal]
+        public static TimeSpan FromMilliseconds(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromSeconds(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromMinutes(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromHours(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromDays(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System.TimeSpan FromTicks(long value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System_TimeSpan operator +(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator ==(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator >(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator >=(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator !=(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator <(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator <=(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System_TimeSpan operator -(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System_TimeSpan operator -(System_TimeSpan t)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(long ticks)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(int hours, int minutes, int seconds)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(int days, int hours, int minutes, int seconds)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public int Days
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Hours 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Milliseconds 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Minutes 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Seconds 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public long Ticks
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalMilliseconds
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalSeconds  
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalMinutes 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalHours 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalDays 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public static System.TimeSpan Parse(string s)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public override string ToString()
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+    [JSProxy(typeof(DateTime), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_DateTime
+    {
+        [JSExternal]
+        public System_DateTime(long ticks)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        private System_DateTime(ulong dateData)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_DateTime(int year, int month, int day)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_DateTime(int year, int month, int day, Calendar calendar)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System.DateTime Now
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public static System.DateTime UtcNow { 
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public string ToLongTimeString()
+        {
+            throw new NotImplementedException();
+        }
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.Linq.cs b/Proxies/BCL/JSIL.Bootstrap.Linq.cs
new file mode 100644
index 0000000..d6bf8a9
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.Linq.cs
@@ -0,0 +1,220 @@
+ï»¿using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
+using System.Linq.Expressions;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(Enumerable), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceDeclared, false)]
+    public static class System_Linq_Enumerable
+    {
+        [JSExternal]
+        public static bool Any<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool Any<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TSource> AsEnumerable<TSource>(this IEnumerable<TSource> source)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static int Count<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource First<TSource>(this IEnumerable<TSource> source)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource First<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> Select<TSource, TResult>(IEnumerable<TSource> enumerable, Func<TSource, TResult> selector)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource[] ToArray<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool Contains<TSource>(IEnumerable<TSource> enumerable, TSource item)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> Cast<TResult>(IEnumerable enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static List<TSource> ToList<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource ElementAt<TSource>(IEnumerable<TSource> enumerable, int index)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource ElementAtOrDefault<TSource>(IEnumerable<TSource> enumerable, int index)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> OfType<TResult>(IEnumerable enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TSource> Where<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicat)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<int> Range(int from, int to)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static int Sum(IEnumerable<int> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static float Sum(IEnumerable<float> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static double Sum(IEnumerable<double> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> Empty<TResult>()
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+
+    [JSProxy(typeof(Expression), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Linq_Expressions_Expression
+    {
+        [JSExternal]
+        public static ConstantExpression Constant(object value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static ConstantExpression Constant(object value, Type type)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static ParameterExpression Parameter(Type type)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static ParameterExpression Parameter(Type type, string name)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static BinaryExpression Equal(Expression left, Expression right)
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+    [JSProxy(typeof(ConstantExpression), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Linq_Expressions_ConstantExpression
+    {
+        [JSExternal]
+        [JSReplaceConstructor]
+        public System_Linq_Expressions_ConstantExpression(object obj)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        private static ConstantExpression Make(object obj, Type type)
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+    [JSProxy(typeof(ParameterExpression), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Linq_Expressions_ParameterExpression : Expression
+    {
+        [JSExternal]
+        private static ParameterExpression Make(Type type, string name, bool flag)
+        {
+            throw new NotImplementedException();
+        }
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.Resources.cs b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
new file mode 100644
index 0000000..5243248
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
@@ -0,0 +1,107 @@
+ï»¿using System;
+using System.Globalization;
+using System.Resources;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(ResourceManager), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Resources_ResourceManager
+    {
+    }
+
+    [JSProxy(typeof(ResourceSet), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Resources_ResourceSet
+    {
+    }
+
+    [JSProxy(typeof(CultureInfo), JSProxyMemberPolicy.ReplaceDeclared, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Globalization_CultureInfo
+    {
+        [JSExternal]
+        [JSReplaceConstructor]
+        public System_Globalization_CultureInfo(string cultureId)
+        {
+            
+        }
+
+        [JSExternal]
+        [JSReplaceConstructor]
+        public System_Globalization_CultureInfo(string str, bool boolean)
+        {
+
+        }
+
+        [JSExternal]
+        public virtual object Clone()
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public string Name
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public string TwoLetterISOLanguageName
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public bool UseUserOverride
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public CultureInfo GetCultureByName(string str, bool boolean)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public CultureInfo GetCultureInfo(string str)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public CultureInfo GetCultureInfoByIetfLanguageTag(string str)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public CultureInfo CurrentUICulture
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public CultureInfo CurrentCulture
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.Text.cs b/Proxies/BCL/JSIL.Bootstrap.Text.cs
new file mode 100644
index 0000000..7d69f40
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.Text.cs
@@ -0,0 +1,79 @@
+ï»¿using System.Text;
+using System.Text.RegularExpressions;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(string), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_String
+    {
+    }
+
+    [JSProxy(typeof(Encoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_Encoding
+    {
+    }
+
+    [JSProxy(typeof(ASCIIEncoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_ASCIIEncoding
+    {
+    }
+
+    [JSProxy(typeof(UTF8Encoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_UTF8Encoding
+    {
+    }
+
+    [JSProxy(typeof(UnicodeEncoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_UnicodeEncoding
+    {
+    }
+
+    [JSProxy(typeof(StringBuilder), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_StringBuilder
+    {
+    }
+
+    [JSProxy(typeof(Regex), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Regex
+    {
+    }
+
+    [JSProxy(typeof(MatchCollection), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_MatchCollection
+    {
+    }
+
+    [JSProxy(typeof(Capture), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Capture
+    {
+    }
+
+    [JSProxy(typeof(Group), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Group
+    {
+    }
+
+    [JSProxy(typeof(Match), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Match
+    {
+    }
+
+    [JSProxy(typeof(GroupCollection), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_GroupCollection
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.cs b/Proxies/BCL/JSIL.Bootstrap.cs
new file mode 100644
index 0000000..544e41c
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.cs
@@ -0,0 +1,246 @@
+ï»¿using System;
+using System.Collections;
+using System.Diagnostics;
+using System.IO;
+using System.Threading;
+using System.Xml.Serialization;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(Exception), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Exception
+    {
+    }
+
+    [JSProxy(typeof(SystemException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_SystemException
+    {
+    }
+
+    [JSProxy(typeof(InvalidCastException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_InvalidCastException
+    {
+    }
+
+    [JSProxy(typeof(InvalidOperationException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_InvalidOperationException
+    {
+    }
+
+    [JSProxy(typeof(FileNotFoundException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileNotFoundException
+    {
+    }
+
+    [JSProxy(typeof(FormatException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_FormatException
+    {
+    }
+
+    [JSProxy(typeof(Console), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Console
+    {
+    }
+
+    [JSProxy(typeof(Debug), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Diagnostics_Debug
+    {
+    }
+
+    [JSProxy(typeof(Thread), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Threading_Thread
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.List`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_List_1
+    {
+    }
+
+    [JSProxy(typeof(ArrayList), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_ArrayList
+    {
+    }
+
+    [JSProxy("System.Collections.ObjectModel.Collection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_ObjectModel_Collection_1
+    {
+    }
+
+    [JSProxy("System.Collections.ObjectModel.ReadOnlyCollection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_ObjectModel_ReadOnlyCollection_1
+    {
+    }
+
+
+    [JSProxy("System.Collections.Generic.Stack`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Stack_1
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.Queue`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Queue_1
+    {
+    }
+
+    [JSProxy(typeof(Interlocked), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Threading_Interlocked
+    {
+    }
+
+    [JSProxy(typeof(Monitor), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Threading_Monitor
+    {
+    }
+
+    [JSProxy(typeof(Random), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Random
+    {
+    }
+
+    [JSProxy(typeof(Math), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Math
+    {
+    }
+
+    [JSProxy(typeof(Environment), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Environment
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.Dictionary`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Dictionary_2
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.KeyValuePair`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_KeyValuePair_2
+    {
+    }
+
+    [JSProxy(typeof(Nullable), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Nullable
+    {
+    }
+
+    [JSProxy("System.Nullable`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Nullable_1
+    {
+    }
+
+    [JSProxy(typeof(XmlSerializer), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_Serialization_XmlSerializer
+    {
+    }
+
+    [JSProxy(typeof(StackTrace), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_StackTrace
+    {
+    }
+
+    [JSProxy(typeof(StackFrame), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_StackFrame
+    {
+    }
+
+    [JSProxy(typeof(Enum), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Enum
+    {
+    }
+
+    [JSProxy(typeof(Activator), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Activator
+    {
+    }
+
+    [JSProxy(typeof(Stopwatch), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_Stopwatch
+    {
+    }
+
+    [JSProxy(typeof(GC), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_GC
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.HashSet`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_HashSet_1
+    {
+    }
+
+    [JSProxy(typeof(Convert), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Convert
+    {
+    }
+
+    [JSProxy(typeof(BitConverter), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_BitConverter
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.LinkedList`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Collections_Generic_LinkedList_1
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.LinkedListNode`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Collections_Generic_LinkedListNode_1
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.Comparer`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Comparer_1
+    {
+    }
+
+    [JSProxy(typeof(WeakReference), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_WeakReference
+    {
+    }
+
+    [JSProxy(typeof(Trace), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_Trace
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.Core.Reflection.cs b/Proxies/BCL/JSIL.Core.Reflection.cs
new file mode 100644
index 0000000..a92c2be
--- /dev/null
+++ b/Proxies/BCL/JSIL.Core.Reflection.cs
@@ -0,0 +1,18 @@
+ï»¿using System.Reflection;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(ParameterInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Reflection_ParameterInfo
+    {
+    }
+
+    [JSProxy(typeof(EventInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Reflection_EventInfo
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.IO.cs b/Proxies/BCL/JSIL.IO.cs
new file mode 100644
index 0000000..0b44a6b
--- /dev/null
+++ b/Proxies/BCL/JSIL.IO.cs
@@ -0,0 +1,84 @@
+ï»¿using System.IO;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(File), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_File
+    {
+    }
+
+    [JSProxy(typeof (Path), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared,JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_Path
+    {
+    }
+
+    [JSProxy(typeof(Stream), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_Stream
+    {
+    }
+
+    [JSProxy(typeof(FileStream), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileStream
+    {
+    }
+
+    [JSProxy(typeof(MemoryStream), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_MemoryStream
+    {
+    }
+
+    [JSProxy(typeof(BinaryWriter), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_BinaryWriter
+    {
+    }
+
+    [JSProxy(typeof(BinaryReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_BinaryReader
+    {
+    }
+
+    [JSProxy(typeof(StreamReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_StreamReader
+    {
+    }
+
+    [JSProxy(typeof(TextReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_TextReader
+    {
+    }
+
+    [JSProxy(typeof(FileSystemInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileSystemInfo
+    {
+    }
+
+    [JSProxy(typeof(DirectoryInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_DirectoryInfo
+    {
+    }
+
+    [JSProxy(typeof(FileInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileInfo
+    {
+    }
+
+    [JSProxy(typeof(Directory), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_Directory
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.Unsafe.cs b/Proxies/BCL/JSIL.Unsafe.cs
new file mode 100644
index 0000000..0d89d47
--- /dev/null
+++ b/Proxies/BCL/JSIL.Unsafe.cs
@@ -0,0 +1,25 @@
+ï»¿using System;
+using System.Runtime.InteropServices;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(Marshal), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Runtime_InteropServices_Marshal
+    {
+    }
+
+    [JSProxy(typeof(GCHandle), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Runtime_InteropServices_GCHandle
+    {
+    }
+
+    [JSProxy(typeof(Buffer), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Buffer
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.XML.cs b/Proxies/BCL/JSIL.XML.cs
new file mode 100644
index 0000000..f8c5855
--- /dev/null
+++ b/Proxies/BCL/JSIL.XML.cs
@@ -0,0 +1,43 @@
+ï»¿using System.Xml;
+using System.Xml.Serialization;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(XmlSerializationReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_Serialization_XmlSerializationReader
+    {
+    }
+
+    [JSProxy(typeof(XmlQualifiedName), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlQualifiedName
+    {
+    }
+
+    [JSProxy(typeof(XmlReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlReader
+    {
+    }
+
+    [JSProxy(typeof(XmlNameTable), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlNameTable
+    {
+    }
+
+    [JSProxy(typeof(XmlConvert), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlConvert
+    {
+    }
+
+    [JSProxy(typeof(XmlWriter), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlWriter
+    {
+    }
+}
\ No newline at end of file
diff --git a/Proxies/BCL/Properties/AssemblyInfo.cs b/Proxies/BCL/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..ab2672e
--- /dev/null
+++ b/Proxies/BCL/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+ï»¿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following 
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("JSIL Proxies BLC")]
+[assembly: AssemblyDescription("JSIL Standard Type Proxies for BCL assemblies")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("Squared Interactive")]
+[assembly: AssemblyProduct("JSIL")]
+[assembly: AssemblyCopyright("Copyright Â© Squared Interactive 2011")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible 
+// to COM components.  If you need to access a type in this assembly from 
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("8BB79C50-0821-4C59-AFF8-21F25591F0E4")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version 
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers 
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/Proxies/BCL/Proxies.Bcl.csproj b/Proxies/BCL/Proxies.Bcl.csproj
new file mode 100644
index 0000000..513f1c4
--- /dev/null
+++ b/Proxies/BCL/Proxies.Bcl.csproj
@@ -0,0 +1,64 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProductVersion>8.0.30703</ProductVersion>
+    <SchemaVersion>2.0</SchemaVersion>
+    <ProjectGuid>{261C3CF3-D25E-4F17-8973-5D0F761FE422}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>JSIL.Proxies.Bcl</RootNamespace>
+    <AssemblyName>JSIL.Proxies.Bcl</AssemblyName>
+    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>..\..\bin\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>..\..\bin\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="JSIL.Bootstrap.cs" />
+    <Compile Include="JSIL.Bootstrap.DateTime.cs" />
+    <Compile Include="JSIL.Bootstrap.Linq.cs" />
+    <Compile Include="JSIL.Bootstrap.Resources.cs" />
+    <Compile Include="JSIL.Bootstrap.Text.cs" />
+    <Compile Include="JSIL.Core.Reflection.cs" />
+    <Compile Include="JSIL.IO.cs" />
+    <Compile Include="JSIL.Unsafe.cs" />
+    <Compile Include="JSIL.XML.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\..\Meta\Meta.csproj">
+      <Project>{37C67C73-1F58-49B8-A39E-768AC88C2447}</Project>
+      <Name>Meta</Name>
+      <Private>True</Private>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
+       Other similar extension points exist, see Microsoft.Common.targets.
+  <Target Name="BeforeBuild">
+  </Target>
+  <Target Name="AfterBuild">
+  </Target>
+  -->
+</Project>
\ No newline at end of file
-- 
1.9.3


From e296e62bbab5c095ceb5e4e155e39f03088de704 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 13 May 2014 13:50:56 -0700
Subject: [PATCH 02/10] Implemented MethodInfo properties: IsGenericMethod,
 IsGenericMethodDefinition, ContainsGenericParameters

--HG--
extra : source : 9222085b9c9dfa40a82df5afc7d823df7fa93961
---
 Libraries/JSIL.Core.Reflection.js                  | 24 ++++++
 .../ReflectionGenericMethodInfoProperties.cs       | 98 ++++++++++++++++++++++
 .../ReflectionGenericMethodInvoke.cs               | 24 +++---
 Tests/Tests.csproj                                 |  1 +
 4 files changed, 135 insertions(+), 12 deletions(-)
 create mode 100644 Tests/SimpleTestCases/ReflectionGenericMethodInfoProperties.cs

diff --git a/Libraries/JSIL.Core.Reflection.js b/Libraries/JSIL.Core.Reflection.js
index f0a2ed9..56e1e45 100644
--- a/Libraries/JSIL.Core.Reflection.js
+++ b/Libraries/JSIL.Core.Reflection.js
@@ -879,6 +879,27 @@ JSIL.ImplementExternals("System.Reflection.MethodInfo", function ($) {
       return info;
     }
   );
+
+  $.Method({Public: true , Static: false}, "get_IsGenericMethod",
+    new JSIL.MethodSignature($.Type, []),
+    function get_IsGenericMethod() {
+      return this._data.signature.genericArgumentNames.length !== 0;
+    }
+  );
+
+  $.Method({Public: true , Static: false}, "get_IsGenericMethodDefinition",
+    new JSIL.MethodSignature($.Type, []),
+    function get_IsGenericMethodDefinition() {
+      return this._data.signature.genericArgumentNames.length !== 0 && this._data.signature.genericArgumentValues === undefined;
+    }
+  );
+
+  $.Method({Public: true , Static: false}, "get_ContainsGenericParameters",
+    new JSIL.MethodSignature($.Type, []),
+    function get_IsGenericMethodDefinition() {
+      return this.DeclaringType.get_ContainsGenericParameters() || (this._data.signature.genericArgumentNames.length !== 0 && this._data.signature.genericArgumentValues === undefined);
+    }
+  );
 });
 
 JSIL.ImplementExternals(
@@ -961,6 +982,9 @@ JSIL.MakeClass("System.Type", "System.RuntimeType", false, [], function ($) {
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.MethodBase", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "IsGenericMethod");
+    $.Property({Public: true , Static: false, Virtual: true }, "IsGenericMethodDefinition");
+    $.Property({Public: true , Static: false, Virtual: true }, "ContainsGenericParameters");
 });
 
 JSIL.MakeClass("System.Reflection.MethodBase", "System.Reflection.MethodInfo", true, [], function ($) {
diff --git a/Tests/SimpleTestCases/ReflectionGenericMethodInfoProperties.cs b/Tests/SimpleTestCases/ReflectionGenericMethodInfoProperties.cs
new file mode 100644
index 0000000..0d87303
--- /dev/null
+++ b/Tests/SimpleTestCases/ReflectionGenericMethodInfoProperties.cs
@@ -0,0 +1,98 @@
+ï»¿using System;
+using System.Reflection;
+
+public static class Program
+{
+    public static void Main(string[] args)
+    {
+        Write(typeof(NonGeneric).GetMethod("NonGenericMethod"));
+        Write(typeof(NonGeneric).GetMethod("GenericMethod"));
+        Write(typeof(NonGeneric).GetMethod("GenericMethod").MakeGenericMethod(new [] {typeof(string)}));
+
+        Write(typeof(Generic1<,>).GetMethod("NonGenericMethod"));
+        Write(typeof(Generic1<,>).GetMethod("GenericMethodBoth"));
+        Write(typeof(Generic1<,>).GetMethod("GenericMethodFirst"));
+        Write(typeof(Generic1<,>).GetMethod("GenericMethodSecond"));
+        Write(typeof(Generic1<,>).GetMethod("GenericMethodExternal"));
+        Write(typeof(Generic1<,>).GetMethod("GenericMethodExternal").MakeGenericMethod(new[] { typeof(string) }));
+
+        Write(typeof(Generic2<>).BaseType.GetMethod("NonGenericMethod"));
+        Write(typeof(Generic2<>).BaseType.GetMethod("GenericMethodBoth"));
+        Write(typeof(Generic2<>).BaseType.GetMethod("GenericMethodFirst"));
+        Write(typeof(Generic2<>).BaseType.GetMethod("GenericMethodSecond"));
+        Write(typeof(Generic2<>).BaseType.GetMethod("GenericMethodExternal"));
+        Write(typeof(Generic2<>).BaseType.GetMethod("GenericMethodExternal").MakeGenericMethod(new[] { typeof(string) }));
+
+        Write(typeof(Generic2<>).GetMethod("NonGenericMethodDerived"));
+        Write(typeof(Generic2<>).GetMethod("GenericMethodDerived"));
+        Write(typeof(Generic2<>).GetMethod("GenericMethodExternalDerived"));
+        Write(typeof(Generic2<>).GetMethod("GenericMethodExternalDerived").MakeGenericMethod(new[] { typeof(string) }));
+
+        Write(typeof(Generic2<int>).BaseType.GetMethod("NonGenericMethod"));
+        Write(typeof(Generic2<int>).BaseType.GetMethod("GenericMethodBoth"));
+        Write(typeof(Generic2<int>).BaseType.GetMethod("GenericMethodFirst"));
+        Write(typeof(Generic2<int>).BaseType.GetMethod("GenericMethodSecond"));
+        Write(typeof(Generic2<int>).BaseType.GetMethod("GenericMethodExternal"));
+        Write(typeof(Generic2<int>).BaseType.GetMethod("GenericMethodExternal").MakeGenericMethod(new[] { typeof(string) }));
+
+        Write(typeof(Generic2<int>).GetMethod("NonGenericMethodDerived"));
+        Write(typeof(Generic2<int>).GetMethod("GenericMethodDerived"));
+        Write(typeof(Generic2<int>).GetMethod("GenericMethodExternalDerived"));
+        Write(typeof(Generic2<int>).GetMethod("GenericMethodExternalDerived").MakeGenericMethod(new[] { typeof(string) }));
+
+        Write(typeof(Generic2<>).MakeGenericType(new Type[] { typeof(Generic2<>) }).GetMethod("NonGenericMethodDerived"));
+    }
+
+
+    public static void Write(MethodInfo methodInfo)
+    {
+        Console.WriteLine("IsGenericMethod: {0}", methodInfo.IsGenericMethod);
+        Console.WriteLine("IsGenericMethodDefinition: {0}", methodInfo.IsGenericMethodDefinition);
+        Console.WriteLine("ContainsGenericParameters: {0}", methodInfo.ContainsGenericParameters);
+        Console.WriteLine();
+    }
+ }
+
+
+public class NonGeneric 
+{
+    public void GenericMethod<T>(T input)
+    {
+    }
+
+    public void NonGenericMethod(string input)
+    {
+    }
+}
+
+public class Generic1<T,V>
+{
+    public void NonGenericMethod()
+    {
+    }
+    public void GenericMethodBoth(T input, V input2)
+    {
+    }
+    public void GenericMethodFirst(T input)
+    {
+    }
+    public void GenericMethodSecond(T input)
+    {
+    }
+    public void GenericMethodExternal<U>(U input)
+    {
+    }
+}
+
+public class Generic2<V> : Generic1<string, V>
+{
+    public void NonGenericMethodDerived()
+    {
+    }
+    public void GenericMethodDerived(V input)
+    {
+    }
+    public void GenericMethodExternalDerived<U>(U input)
+    {
+    }
+}
diff --git a/Tests/SimpleTestCases/ReflectionGenericMethodInvoke.cs b/Tests/SimpleTestCases/ReflectionGenericMethodInvoke.cs
index cdf6c8e..287eb6a 100644
--- a/Tests/SimpleTestCases/ReflectionGenericMethodInvoke.cs
+++ b/Tests/SimpleTestCases/ReflectionGenericMethodInvoke.cs
@@ -1,9 +1,9 @@
 ï»¿using System;
-using System.Reflection;
-
-public static class Program
-{
-    public static void Main(string[] args)
+using System.Reflection;
+
+public static class Program
+{
+    public static void Main(string[] args)
     {
         Console.WriteLine(Class1.GetGenericMethodInfo() == Class2.GetGenericMethodInfo() ? "true" : "false");
 
@@ -71,15 +71,15 @@ public static void Main(string[] args)
         mi.Invoke(obj, new object[] { 22 });
         actionInt = (Action<int>)Delegate.CreateDelegate(typeof(Action<int>), obj, mi);
         actionInt(23);*/
-    }
-
+    }
+
     public static void StaticGenericMethod<T>(T input)
     {
         Console.WriteLine(typeof(T).Name);
         Console.WriteLine(input);
-    }
-}
-
+    }
+}
+
 public interface INonGeneric
 {
     void InstanceGenericMethod<T>(T input);
@@ -131,5 +131,5 @@ public static MethodInfo GetGenericMethodInfo()
     {
         return typeof(Generic<string>).GetMethod("InstanceGenericMethod").MakeGenericMethod(new[] { typeof(string) });
     }
-}
-
+}
+
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index a9ec91c..6e42189 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -855,6 +855,7 @@
     <None Include="SimpleTestCases\Issue364_3.cs" />
     <None Include="SimpleTestCases\Issue368.cs" />
     <None Include="SpecialTestCases\PreventFastMethodDispatcherIfHideBase_Issue368.cs" />
+    <None Include="SimpleTestCases\ReflectionGenericMethodInfoProperties.cs" />
     <None Include="SimpleTestCases\ReflectionTypeGenericInfo.cs" />
     <None Include="SimpleTestCases\InterfaceGenericCallWithGenericParameter_Issue348.cs" />
     <None Include="SimpleTestCases\ReflectionGenericMethodInvoke.cs" />
-- 
1.9.3


From 5fa2389db6d3e362ea2ca97aaa5885fd28bb54d3 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Mon, 26 May 2014 02:05:12 -0700
Subject: [PATCH 03/10] Fixed reflection for generic method argument/return
 type.

--HG--
extra : source : a5abbe500739e883846cef82b80f31847ca48747
extra : amend_source : 3a9b3da31436479e45202cc022c002a28b20e55b
---
 Libraries/JSIL.Core.Reflection.js                  |  39 ++++----
 .../ReflectionMethodArgumentTypes.cs               | 109 +++++++++++++++++++++
 Tests/Tests.csproj                                 |   1 +
 3 files changed, 130 insertions(+), 19 deletions(-)
 create mode 100644 Tests/SimpleTestCases/ReflectionMethodArgumentTypes.cs

diff --git a/Libraries/JSIL.Core.Reflection.js b/Libraries/JSIL.Core.Reflection.js
index f0a2ed9..48dd1e6 100644
--- a/Libraries/JSIL.Core.Reflection.js
+++ b/Libraries/JSIL.Core.Reflection.js
@@ -574,6 +574,17 @@ JSIL.ImplementExternals(
 
 JSIL.ImplementExternals(
   "System.Reflection.MethodBase", function ($) {
+    $.RawMethod(false, "InitResolvedSignature",
+      function InitResolvedSignature() {
+        if (this.resolvedSignature === undefined) {
+          this._data.resolvedSignature = this._data.signature.Resolve(this.Name);
+          if (this._data.signature.genericArgumentValues !== undefined) {
+            this._data.resolvedSignature = this._data.resolvedSignature.ResolvePositionalGenericParameters(this._data.signature.genericArgumentValues)
+          }
+        }
+      }
+    );
+  
     $.Method({Static:false, Public:false}, "GetParameterTypes", 
       (new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Type")]), [], [])), 
       function GetParameterTypes () {
@@ -730,21 +741,18 @@ $jsilcore.$MethodGetParameters = function (method) {
 
   if (typeof (result) === "undefined") {
     result = method._cachedParameters = [];
+    method.InitResolvedSignature();
 
-    var argumentTypes = method._data.signature.argumentTypes;
+    var argumentTypes = method._data.resolvedSignature.argumentTypes;
     var parameterInfos = method._data.parameterInfo;
     var tParameterInfo = $jsilcore.System.Reflection.ParameterInfo.__Type__;
 
     if (argumentTypes) {
       for (var i = 0; i < argumentTypes.length; i++) {
-        var argumentType = JSIL.ResolveTypeReference(
-          argumentTypes[i], method._typeObject.__Context__
-        )[1];
-
         var parameterInfo = parameterInfos[i] || null;
 
         // FIXME: Missing non-type information
-        var pi = JSIL.CreateInstanceOfType(tParameterInfo, "$fromArgumentTypeAndPosition", [argumentType, i]);
+        var pi = JSIL.CreateInstanceOfType(tParameterInfo, "$fromArgumentTypeAndPosition", [argumentTypes[i], i]);
         if (parameterInfo)
           pi.$populateWithParameterInfo(parameterInfo);
 
@@ -756,7 +764,7 @@ $jsilcore.$MethodGetParameters = function (method) {
   return result;
 };
 
-JSIL.ImplementExternals("System.Reflection.MethodInfo", function ($) {
+JSIL.ImplementExternals("System.Reflection.MethodInfo", function ($) { 
   $.Method({Static: false, Public: true }, "GetParameters", 
     (new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Reflection.ParameterInfo")]), [], [])),
     function GetParameters () {
@@ -767,18 +775,10 @@ JSIL.ImplementExternals("System.Reflection.MethodInfo", function ($) {
   $.Method({Static:false, Public:true }, "get_ReturnType", 
     (new JSIL.MethodSignature($jsilcore.TypeRef("System.Type"), [], [])), 
     function get_ReturnType () {
-      if (!this._data.signature.returnType)
-        return $jsilcore.System.Void.__Type__;
-
-      var result = this._cachedReturnType;
-
-      if (typeof (result) === "undefined") {
-        result = this._cachedReturnType = JSIL.ResolveTypeReference(
-          this._data.signature.returnType, this._typeObject.__Context__
-        )[1];
-      }
-
-      return result;
+       if (!this._data.signature.returnType)
+        return $jsilcore.System.Void.__Type__;	  
+      this.InitResolvedSignature();
+      return this._data.resolvedSignature.returnType;
     }
   );
 
@@ -868,6 +868,7 @@ JSIL.ImplementExternals("System.Reflection.MethodInfo", function ($) {
       info.__Overrides__ = this.__Overrides__;
 
       info._data = {};
+	  info._data.parameterInfo = this._data.parameterInfo;
 
       if (this._data.genericSignature)
         info._data.genericSignature = this._data.genericSignature;
diff --git a/Tests/SimpleTestCases/ReflectionMethodArgumentTypes.cs b/Tests/SimpleTestCases/ReflectionMethodArgumentTypes.cs
new file mode 100644
index 0000000..5ef4759
--- /dev/null
+++ b/Tests/SimpleTestCases/ReflectionMethodArgumentTypes.cs
@@ -0,0 +1,109 @@
+ï»¿using System;
+using System.Reflection;
+
+public static class Program
+{
+    public static void Main(string[] args)
+    {
+        Write(typeof(Program).GetMethod("StaticGenericMethod").MakeGenericMethod(typeof(A3), typeof(A4)));
+        Write(typeof(Program).GetMethod("StaticNonGenericMethod"));
+
+        Write(typeof(INonGeneric).GetMethod("InstanceGenericMethod1").MakeGenericMethod(typeof(B3), typeof(B4)));
+        Write(typeof(INonGeneric).GetMethod("InstanceNonGenericMethod1"));
+
+        Write(typeof(NonGeneric).GetMethod("InstanceGenericMethod1").MakeGenericMethod(typeof(B3), typeof(B4)));
+        Write(typeof(NonGeneric).GetMethod("InstanceNonGenericMethod1"));
+
+        Write(typeof(IGeneric<Q>).GetMethod("InstanceGenericMethod2").MakeGenericMethod(typeof(C3), typeof(C4)));
+        Write(typeof(IGeneric<Q>).GetMethod("InstanceNonGenericMethod2"));
+
+        Write(typeof(Generic<Q>).GetMethod("InstanceGenericMethod1").MakeGenericMethod(typeof(C3), typeof(C4)));
+        Write(typeof(Generic<Q>).GetMethod("InstanceNonGenericMethod1"));
+        Write(typeof(Generic<Q>).GetMethod("InstanceGenericMethod2").MakeGenericMethod(typeof(C3), typeof(C4)));
+        Write(typeof(Generic<Q>).GetMethod("InstanceNonGenericMethod2"));
+    }
+
+    public static void Write(MethodInfo mi)
+    {
+        Console.WriteLine(mi.ReturnType.Name);
+        foreach (var parameterInfo in mi.GetParameters())
+        {
+            Console.WriteLine(parameterInfo.ParameterType.Name);
+        }
+    }
+
+    public static T1 StaticGenericMethod<T1, T2>(T2 input, A1 input2)
+    {
+        return default(T1);
+    }
+
+    public static A1 StaticNonGenericMethod(A2 input)
+    {
+        return null;
+    }
+}
+
+public interface INonGeneric
+{
+    T2 InstanceGenericMethod1<T1, T2>(T1 input, B1 input2);
+    B2 InstanceNonGenericMethod1(B1 input2);
+}
+
+public interface IGeneric<TClass>
+{
+    T2 InstanceGenericMethod2<T1, T2>(TClass input0, T1 input, C1 input2);
+    C2 InstanceNonGenericMethod2(TClass input, C1 input2);
+}
+
+public class NonGeneric : INonGeneric
+{
+    public T2 InstanceGenericMethod1<T1, T2>(T1 input, B1 input2)
+    {
+        return default(T2);
+    }
+
+    public B2 InstanceNonGenericMethod1(B1 input2)
+    {
+        return null;
+    }
+}
+
+public class Generic<TClass> : INonGeneric, IGeneric<TClass>
+{
+    public T2 InstanceGenericMethod1<T1, T2>(T1 input, B1 input2)
+    {
+        return default(T2);
+    }
+
+    public B2 InstanceNonGenericMethod1(B1 input2)
+    {
+        return null;
+    }
+
+    public T2 InstanceGenericMethod2<T1, T2>(TClass input0, T1 input, C1 input2)
+    {
+        return default(T2);
+    }
+
+    public C2 InstanceNonGenericMethod2(TClass input, C1 input2)
+    {
+        return null;
+    }
+}
+
+public class Q { }
+
+public class A1 { }
+public class A2 { }
+public class A3 { }
+public class A4 { }
+
+public class B1 { }
+public class B2 { }
+public class B3 { }
+public class B4 { }
+
+public class C1 { }
+public class C2 { }
+public class C3 { }
+public class C4 { }
\ No newline at end of file
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index a9ec91c..b4304be 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -858,6 +858,7 @@
     <None Include="SimpleTestCases\ReflectionTypeGenericInfo.cs" />
     <None Include="SimpleTestCases\InterfaceGenericCallWithGenericParameter_Issue348.cs" />
     <None Include="SimpleTestCases\ReflectionGenericMethodInvoke.cs" />
+    <None Include="SimpleTestCases\ReflectionMethodArgumentTypes" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\JSIL\JSIL.csproj">
-- 
1.9.3


From dff52ad3c09ffee36e8838692bda8ad934fdf3c2 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 02:31:24 -0700
Subject: [PATCH 04/10] Do not add MethodSignatures to parent/child types for
 static methods and constructors.

--HG--
extra : amend_source : 7b7bf1aef5f00c950d5592eb59695c684dee061b
---
 JSIL/TypeInformation.cs | 31 ++++++++++++++++++++++++-------
 1 file changed, 24 insertions(+), 7 deletions(-)

diff --git a/JSIL/TypeInformation.cs b/JSIL/TypeInformation.cs
index bb31d39..6b9dc29 100644
--- a/JSIL/TypeInformation.cs
+++ b/JSIL/TypeInformation.cs
@@ -463,6 +463,7 @@ public class TypeInfo {
         protected bool _MethodGroupsInitialized = false;
 
         protected List<NamedMethodSignature> DeferredMethodSignatureSetUpdates = new List<NamedMethodSignature>();
+        protected List<NamedMethodSignature> DeferredStaticMethodSignatureSetUpdates = new List<NamedMethodSignature>();
 
         public TypeInfo (ITypeInfoSource source, ModuleInfo module, TypeDefinition type, TypeInfo declaringType, TypeInfo baseClass, TypeIdentifier identifier) {
             Identifier = identifier;
@@ -740,8 +741,11 @@ public class TypeInfo {
                 }
             }
 
-            //DeferredMethodSignatureSetUpdates.Clear();
-            //DeferredMethodSignatureSetUpdates = null;
+            foreach (var nms in DeferredStaticMethodSignatureSetUpdates)
+            {
+                var set = MethodSignatures.GetOrCreateFor(nms.Name);
+                set.Add(nms);
+            }
         }
 
         public bool IsFullyInitialized {
@@ -1132,8 +1136,12 @@ protected bool BeforeAddProxyMember<T> (ProxyInfo proxy, T member, out IMemberIn
             if (!Members.TryAdd(identifier, result))
                 throw new InvalidOperationException();
 
-            DeferredMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
-
+            if (method.IsStatic || method.IsConstructor) {
+                DeferredStaticMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            }
+            else {
+                DeferredMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            }
             return (MethodInfo)result;
         }
 
@@ -1147,7 +1155,12 @@ protected bool BeforeAddProxyMember<T> (ProxyInfo proxy, T member, out IMemberIn
             if (!Members.TryAdd(identifier, result))
                 throw new InvalidOperationException();
 
-            DeferredMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            if (method.IsStatic || method.IsConstructor) {
+                DeferredStaticMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            }
+            else {
+                DeferredMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            }
 
             return (MethodInfo)result;
         }
@@ -1164,8 +1177,12 @@ protected bool BeforeAddProxyMember<T> (ProxyInfo proxy, T member, out IMemberIn
 
             if (method.Name == ".cctor")
                 StaticConstructor = method;
-
-            DeferredMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            if (method.IsStatic || method.IsConstructor) {
+                DeferredStaticMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            }
+            else {
+                DeferredMethodSignatureSetUpdates.Add(((MethodInfo)result).NamedSignature);
+            }
 
             return (MethodInfo)result;
         }
-- 
1.9.3


From 6cfd7e27b2a60fff691e0a951316972b3491988d Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 15:07:41 -0700
Subject: [PATCH 05/10] Included Proxies.Bcl to release build.

---
 JSIL.sln       | 1 +
 JSIL_NoXNA.sln | 1 +
 2 files changed, 2 insertions(+)

diff --git a/JSIL.sln b/JSIL.sln
index 0bb663e..9fed407 100644
--- a/JSIL.sln
+++ b/JSIL.sln
@@ -179,6 +179,7 @@ Global
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/JSIL_NoXNA.sln b/JSIL_NoXNA.sln
index 95462f4..6c5c469 100644
--- a/JSIL_NoXNA.sln
+++ b/JSIL_NoXNA.sln
@@ -146,6 +146,7 @@ Global
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
-- 
1.9.3


From 4fb2f8bc9a016efea3f8e7f4bd8c08e6a2fc2d3d Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 17:33:03 -0700
Subject: [PATCH 06/10] BCL proxies cleaned up and update for last JSIL
 changes.

--HG--
extra : source : a606c3916eae40d19a64ef596d090dbffd1bc91e
---
 Proxies/BCL/JSIL.Bootstrap.DateTime.cs  | 41 ++++++++++++++++++++-------------
 Proxies/BCL/JSIL.Bootstrap.Resources.cs | 20 ++++++++--------
 Proxies/BCL/JSIL.Bootstrap.cs           | 26 +++++++++++----------
 3 files changed, 49 insertions(+), 38 deletions(-)

diff --git a/Proxies/BCL/JSIL.Bootstrap.DateTime.cs b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
index 2c32b1f..fbc7df3 100644
--- a/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
@@ -39,7 +39,7 @@ public static TimeSpan FromDays(double value)
         }
 
         [JSExternal]
-        public static System.TimeSpan FromTicks(long value)
+        public static TimeSpan FromTicks(long value)
         {
             throw new NotImplementedException();
         }
@@ -99,122 +99,126 @@ public static System.TimeSpan FromTicks(long value)
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(long ticks)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(int hours, int minutes, int seconds)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(int days, int hours, int minutes, int seconds)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds)
         {
             throw new NotImplementedException();
         }
 
-        [JSExternal]
         public int Days
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Hours 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Milliseconds 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Minutes 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Seconds 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public long Ticks
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalMilliseconds
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalSeconds  
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalMinutes 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalHours 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalDays 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
@@ -238,40 +242,45 @@ public override string ToString()
     public class System_DateTime
     {
         [JSExternal]
+        [JSReplaceConstructor]
         public System_DateTime(long ticks)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         private System_DateTime(ulong dateData)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_DateTime(int year, int month, int day)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_DateTime(int year, int month, int day, Calendar calendar)
         {
             throw new NotImplementedException();
         }
 
-        [JSExternal]
-        public static System.DateTime Now
+        public static DateTime Now
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
-        public static System.DateTime UtcNow { 
+        public static DateTime UtcNow
+        {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
diff --git a/Proxies/BCL/JSIL.Bootstrap.Resources.cs b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
index 5243248..43c0e0d 100644
--- a/Proxies/BCL/JSIL.Bootstrap.Resources.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
@@ -41,27 +41,27 @@ public virtual object Clone()
             throw new NotImplementedException();
         }
 
-        [JSExternal]
         public string Name
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public string TwoLetterISOLanguageName
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public bool UseUserOverride
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
@@ -69,35 +69,35 @@ public bool UseUserOverride
         }
 
         [JSExternal]
-        public CultureInfo GetCultureByName(string str, bool boolean)
+        private static CultureInfo GetCultureByName(string str, bool boolean)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
-        public CultureInfo GetCultureInfo(string str)
+        public static CultureInfo GetCultureInfo(string str)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
-        public CultureInfo GetCultureInfoByIetfLanguageTag(string str)
+        public static CultureInfo GetCultureInfoByIetfLanguageTag(string str)
         {
             throw new NotImplementedException();
         }
 
-        [JSExternal]
-        public CultureInfo CurrentUICulture
+        public static CultureInfo CurrentUICulture
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
-        public CultureInfo CurrentCulture
+        public static CultureInfo CurrentCulture
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
diff --git a/Proxies/BCL/JSIL.Bootstrap.cs b/Proxies/BCL/JSIL.Bootstrap.cs
index 544e41c..53a2364 100644
--- a/Proxies/BCL/JSIL.Bootstrap.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.cs
@@ -1,5 +1,7 @@
 ï»¿using System;
 using System.Collections;
+using System.Collections.Generic;
+using System.Collections.ObjectModel;
 using System.Diagnostics;
 using System.IO;
 using System.Threading;
@@ -63,7 +65,7 @@ public class System_Threading_Thread
     {
     }
 
-    [JSProxy("System.Collections.Generic.List`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(List<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_List_1
     {
@@ -75,26 +77,26 @@ public class System_Collections_ArrayList
     {
     }
 
-    [JSProxy("System.Collections.ObjectModel.Collection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Collection<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_ObjectModel_Collection_1
     {
     }
 
-    [JSProxy("System.Collections.ObjectModel.ReadOnlyCollection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(ReadOnlyCollection<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_ObjectModel_ReadOnlyCollection_1
     {
     }
 
 
-    [JSProxy("System.Collections.Generic.Stack`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Stack<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Stack_1
     {
     }
 
-    [JSProxy("System.Collections.Generic.Queue`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Queue<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Queue_1
     {
@@ -130,13 +132,13 @@ public static class System_Environment
     {
     }
 
-    [JSProxy("System.Collections.Generic.Dictionary`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Dictionary<,>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Dictionary_2
     {
     }
 
-    [JSProxy("System.Collections.Generic.KeyValuePair`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(KeyValuePair<,>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_KeyValuePair_2
     {
@@ -148,7 +150,7 @@ public static class System_Nullable
     {
     }
 
-    [JSProxy("System.Nullable`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Nullable<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Nullable_1
     {
@@ -196,7 +198,7 @@ public class System_GC
     {
     }
 
-    [JSProxy("System.Collections.Generic.HashSet`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(HashSet<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_HashSet_1
     {
@@ -214,19 +216,19 @@ public static class System_BitConverter
     {
     }
 
-    [JSProxy("System.Collections.Generic.LinkedList`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(LinkedList<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public static class System_Collections_Generic_LinkedList_1
     {
     }
 
-    [JSProxy("System.Collections.Generic.LinkedListNode`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(LinkedListNode<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public static class System_Collections_Generic_LinkedListNode_1
     {
     }
 
-    [JSProxy("System.Collections.Generic.Comparer`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Comparer<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Comparer_1
     {
-- 
1.9.3


From b25f43dcfadd846c4a9762cbd7b59d62c718a2e4 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 20:33:49 -0700
Subject: [PATCH 07/10] Added SimpleTestCasesSourceForTranslatedBcl (empty
 yet). It runs test with translated mscorlib and System.Core using Proxies.Bcl
 and throwOnUnimplementedExternals=false.

--HG--
extra : source : 94809eace594d8e859cc6a9c50cb0b570554f283
extra : amend_source : c45207921eb28d5b2632ed041bc16cf2b2aa20a8
---
 Libraries/JSIL.Shell.js     |  4 ++--
 Tests/ComparisonTest.cs     | 16 +++++++++++-----
 Tests/ComparisonTests.cs    | 40 +++++++++++++++++++++++++++++++++++++++-
 Tests/GenericTestFixture.cs |  9 ++++++---
 test_runner.html            |  4 ++--
 5 files changed, 60 insertions(+), 13 deletions(-)

diff --git a/Libraries/JSIL.Shell.js b/Libraries/JSIL.Shell.js
index c40de14..d3ba5b8 100644
--- a/Libraries/JSIL.Shell.js
+++ b/Libraries/JSIL.Shell.js
@@ -150,9 +150,9 @@ JSIL.Shell.TagObject = function (obj, tag) {
   }
 };
 
-JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args) {
+JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args, throwOnUnimplementedExternals) {
   return function runTestCase (dateNow) {
-    JSIL.ThrowOnUnimplementedExternals = true;
+    JSIL.ThrowOnUnimplementedExternals = throwOnUnimplementedExternals;
 
     timeout(timeoutDuration);
 
diff --git a/Tests/ComparisonTest.cs b/Tests/ComparisonTest.cs
index ed05f6c..38cb06c 100644
--- a/Tests/ComparisonTest.cs
+++ b/Tests/ComparisonTest.cs
@@ -418,6 +418,7 @@ public static bool IsLinux
         public string GenerateJavascript (
             string[] args, out string generatedJavascript, out long elapsedTranslation,
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null
         ) {
             var translationStarted = DateTime.UtcNow.Ticks;
@@ -468,12 +469,13 @@ public static bool IsLinux
             }
 
             var invocationJs = String.Format(
-                "runTestCase = JSIL.Shell.TestPrologue(\r\n  {0}, \r\n  {1}, \r\n  {2}, \r\n  {3}, \r\n  {4}\r\n);",
+                "runTestCase = JSIL.Shell.TestPrologue(\r\n  {0}, \r\n  {1}, \r\n  {2}, \r\n  {3}, \r\n  {4}, \r\n  {5}\r\n);",
                 JavascriptExecutionTimeout,
                 Util.EscapeString(testAssemblyName),
                 Util.EscapeString(testTypeName), 
                 Util.EscapeString(testMethodName),
-                argsJson
+                argsJson,
+                throwOnUnimplementedExternals ? "true" : "false"
             );
 
             generatedJavascript = translatedJs;
@@ -498,25 +500,27 @@ public static bool IsLinux
             string temp1, temp4, temp5;
             long temp2, temp3;
 
-            return RunJavascript(args, out temp1, out temp2, out temp3, out temp4, out temp5, makeConfiguration, onTranslationFailure);
+            return RunJavascript(args, out temp1, out temp2, out temp3, out temp4, out temp5, makeConfiguration, true, onTranslationFailure);
         }
 
         public string RunJavascript (
             string[] args, out string generatedJavascript, out long elapsedTranslation, out long elapsedJs,
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null
         ) {
             string temp1, temp2;
 
-            return RunJavascript(args, out generatedJavascript, out elapsedTranslation, out elapsedJs, out temp1, out temp2, makeConfiguration, onTranslationFailure);
+            return RunJavascript(args, out generatedJavascript, out elapsedTranslation, out elapsedJs, out temp1, out temp2, makeConfiguration, throwOnUnimplementedExternals, onTranslationFailure);
         }
 
         public string RunJavascript (
             string[] args, out string generatedJavascript, out long elapsedTranslation, out long elapsedJs, out string stderr, out string trailingOutput,
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null
         ) {
-            var tempFilename = GenerateJavascript(args, out generatedJavascript, out elapsedTranslation, makeConfiguration, onTranslationFailure);
+            var tempFilename = GenerateJavascript(args, out generatedJavascript, out elapsedTranslation, makeConfiguration, throwOnUnimplementedExternals, onTranslationFailure);
 
             using (var evaluator = EvaluatorPool.Get()) {
                 var startedJs = DateTime.UtcNow.Ticks;
@@ -604,6 +608,7 @@ public static bool IsLinux
         public void Run (
             string[] args = null, 
             Func<Configuration> makeConfiguration = null, 
+            bool throwOnUnimplementedExternals = true,
             bool dumpJsOnFailure = true,
             Action<Exception> onTranslationFailure = null
         ) {
@@ -640,6 +645,7 @@ public static bool IsLinux
                     outputs[1] = RunJavascript(
                         args, out generatedJs[0], out elapsed[1], out elapsed[2], 
                         makeConfiguration: makeConfiguration,
+                        throwOnUnimplementedExternals: throwOnUnimplementedExternals,
                         onTranslationFailure: onTranslationFailure
                     ).Replace("\r", "").Trim();
                 } catch (Exception ex) {
diff --git a/Tests/ComparisonTests.cs b/Tests/ComparisonTests.cs
index d35666d..bd9223d 100644
--- a/Tests/ComparisonTests.cs
+++ b/Tests/ComparisonTests.cs
@@ -8,6 +8,7 @@
 using System.Text;
 using System.Threading;
 using JSIL.Internal;
+using JSIL.Translator;
 using NUnit.Framework;
 
 namespace JSIL.Tests {
@@ -517,11 +518,48 @@ public class ComparisonTests : GenericTestFixture {
             RunSingleComparisonTestCase(parameters);
         }
 
-        protected IEnumerable<TestCaseData> SimpleTestCasesSource () {
+        protected IEnumerable<TestCaseData> SimpleTestCasesSource()
+        {
             return FolderTestSource("SimpleTestCases", MakeDefaultProvider(), new AssemblyCache());
         }
 
         [Test]
+        [TestCaseSource("SimpleTestCasesSourceForTranslatedBcl")]
+        public void SimpleTestCasesForTranslatedBcl(object[] parameters)
+        {
+            RunSingleComparisonTestCase(parameters, () =>
+                {
+                    var c = new Configuration
+                        {
+                            ApplyDefaults = false,
+                        };
+                    c.Assemblies.Stubbed.Add("^System,");
+                    c.Assemblies.Stubbed.Add("^System\\.(?!Core)(.+),");
+                    c.Assemblies.Stubbed.Add("^Microsoft\\.(.+),");
+                    c.Assemblies.Stubbed.Add("FSharp.Core,");
+
+                    c.Assemblies.Ignored.Add("Microsoft\\.VisualC,");
+                    c.Assemblies.Ignored.Add("Accessibility,");
+                    c.Assemblies.Ignored.Add("SMDiagnostics,");
+                    c.Assemblies.Ignored.Add("System\\.EnterpriseServices,");
+                    c.Assemblies.Ignored.Add("System\\.Security,");
+                    c.Assemblies.Ignored.Add("System\\.Runtime\\.Serialization\\.Formatters\\.Soap,");
+                    c.Assemblies.Ignored.Add("System\\.Runtime\\.DurableInstancing,");
+                    c.Assemblies.Ignored.Add("System\\.Data\\.SqlXml,");
+                    c.Assemblies.Ignored.Add("JSIL\\.Meta,");
+
+                    c.Assemblies.Proxies.Add("JSIL.Proxies.Bcl.dll");
+                    return c;
+                },
+                false);
+        }
+
+        protected IEnumerable<TestCaseData> SimpleTestCasesSourceForTranslatedBcl()
+        {
+            return FolderTestSource("SimpleTestCasesForTranslatedBcl", null, new AssemblyCache());
+        }
+
+        [Test]
         [TestCaseSource("JSTestCasesSource")]
         public void JSTestCases (object[] parameters) {
             RunSingleComparisonTestCase(parameters);
diff --git a/Tests/GenericTestFixture.cs b/Tests/GenericTestFixture.cs
index 4e7242d..f7097d7 100644
--- a/Tests/GenericTestFixture.cs
+++ b/Tests/GenericTestFixture.cs
@@ -205,6 +205,7 @@ public class GenericTestFixture : IDisposable {
             string filename, string[] stubbedAssemblies = null, TypeInfoProvider typeInfo = null, Action<string, string> errorCheckPredicate = null,
             List<string> failureList = null, string commonFile = null, bool shouldRunJs = true, AssemblyCache asmCache = null,
             Func<Configuration> makeConfiguration = null, Action<Exception> onTranslationFailure = null,
+            bool throwOnUnimplementedExternals = true,
             string compilerOptions = ""
         ) {
             CompileResult result = null;
@@ -229,13 +230,13 @@ public class GenericTestFixture : IDisposable {
                     result = test.CompileResult;
 
                     if (shouldRunJs) {
-                        test.Run(makeConfiguration: makeConfiguration, onTranslationFailure: onTranslationFailure);
+                        test.Run(makeConfiguration: makeConfiguration, throwOnUnimplementedExternals: throwOnUnimplementedExternals, onTranslationFailure: onTranslationFailure);
                     } else {
                         string js;
                         long elapsed;
                         try {
-                            var csOutput = test.RunCSharp(new string[0], out elapsed);
-                            test.GenerateJavascript(new string[0], out js, out elapsed, makeConfiguration, onTranslationFailure);
+                            var csOutput = test.RunCSharp(new string[0], out elapsed);
+                            test.GenerateJavascript(new string[0], out js, out elapsed, makeConfiguration, throwOnUnimplementedExternals, onTranslationFailure);
 
                             Console.WriteLine("generated");
 
@@ -351,6 +352,7 @@ public class GenericTestFixture : IDisposable {
         protected CompileResult RunSingleComparisonTestCase (
             object[] parameters, 
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null,
             string compilerOptions = ""
         ) {
@@ -363,6 +365,7 @@ public class GenericTestFixture : IDisposable {
                 return RunComparisonTest(
                     (string)parameters[0], null, provider, null, null, (string)parameters[3], true, cache,
                     makeConfiguration: makeConfiguration,
+                    throwOnUnimplementedExternals: throwOnUnimplementedExternals,
                     onTranslationFailure: onTranslationFailure,
                     compilerOptions: compilerOptions
                 );
diff --git a/test_runner.html b/test_runner.html
index 45ab71b..362e07f 100644
--- a/test_runner.html
+++ b/test_runner.html
@@ -99,9 +99,9 @@
 
       JSIL.Shell = {};
 
-      JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args) {
+      JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args, throwOnUnimplementedExternals) {
         return function runTestCase () {
-          JSIL.ThrowOnUnimplementedExternals = true;
+          JSIL.ThrowOnUnimplementedExternals = throwOnUnimplementedExternals;
 
           var started = Date.now();
 
-- 
1.9.3


From 9382a11c733f90541a985ad2988d51125a615fa6 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Mon, 2 Jun 2014 22:30:32 -0700
Subject: [PATCH 08/10] Added MemberInfo.MemberType.

--HG--
extra : source : a8a63a2689e74ca2e21f65ec980295071e3eeb1b
extra : amend_source : a749dbc4cc153c0aaea4d4453cb06eae01e588f1
---
 Libraries/JSIL.Core.Reflection.js             | 52 ++++++++++++++++++++++++++-
 Tests/SimpleTestCases/ReflectionMemberType.cs | 29 +++++++++++++++
 Tests/Tests.csproj                            |  1 +
 3 files changed, 81 insertions(+), 1 deletion(-)
 create mode 100644 Tests/SimpleTestCases/ReflectionMemberType.cs

diff --git a/Libraries/JSIL.Core.Reflection.js b/Libraries/JSIL.Core.Reflection.js
index f0a2ed9..fd0109e 100644
--- a/Libraries/JSIL.Core.Reflection.js
+++ b/Libraries/JSIL.Core.Reflection.js
@@ -939,6 +939,7 @@ JSIL.MakeClass("System.Object", "System.Reflection.MemberInfo", true, [], functi
     $.Property({Public: true , Static: false, Virtual: true }, "IsPublic");
     $.Property({Public: true , Static: false, Virtual: true }, "IsStatic");
     $.Property({Public: true , Static: false, Virtual: true }, "IsSpecialName");
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Type", true, [], function ($) {
@@ -965,19 +966,54 @@ JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.MethodBase", t
 
 JSIL.MakeClass("System.Reflection.MethodBase", "System.Reflection.MethodInfo", true, [], function ($) {
     $.Property({Public: true , Static: false}, "ReturnType");
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Method;
+      }
+    );	
 });
 
 JSIL.MakeClass("System.Reflection.MethodBase", "System.Reflection.ConstructorInfo", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Constructor;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.FieldInfo", true, [], function ($) {
     $.Property({Public: true , Static: false}, "FieldType");
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Field;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.EventInfo", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Event;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.PropertyInfo", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Property;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Object", "System.Reflection.Assembly", true, [], function ($) {
@@ -1326,4 +1362,18 @@ JSIL.ImplementExternals("System.Reflection.EventInfo", function ($) {
       return this.get_EventType().toString() + " " + this.Name;
     }
   );
-});
\ No newline at end of file
+});
+
+JSIL.MakeEnum(
+  "System.Reflection.MemberTypes", true, {
+    Constructor: 1, 
+    Event: 2, 
+    Field: 4, 
+    Method: 8, 
+    Property: 16, 
+    TypeInfo: 32, 
+    Custom: 64, 
+    NestedType: 128, 
+    All: 191
+  }, true
+);
\ No newline at end of file
diff --git a/Tests/SimpleTestCases/ReflectionMemberType.cs b/Tests/SimpleTestCases/ReflectionMemberType.cs
new file mode 100644
index 0000000..6c98be5
--- /dev/null
+++ b/Tests/SimpleTestCases/ReflectionMemberType.cs
@@ -0,0 +1,29 @@
+ï»¿using System;
+
+public static class Program {
+    public static void Main (string[] args)
+    {
+        Console.WriteLine(typeof(TestClass).GetConstructor(new Type[0]).MemberType);
+        Console.WriteLine(typeof(TestClass).GetField("Field").MemberType);
+        Console.WriteLine(typeof(TestClass).GetProperty("Prop").MemberType);
+        Console.WriteLine(typeof(TestClass).GetEvents()[0].MemberType);
+        Console.WriteLine(typeof(TestClass).GetMethod("Method").MemberType);
+    }
+}
+
+public class TestClass
+{
+    public TestClass()
+    {
+    }
+
+    public int Field;
+    public int Prop {
+        get { return 0; }
+    }
+    public event EventHandler Event;
+
+    public void Method()
+    {
+    }
+}
\ No newline at end of file
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index 31edce7..b0d7e09 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -452,6 +452,7 @@
     <None Include="ReflectionTestCases\FieldOrder.cs" />
     <None Include="ReflectionTestCases\GetFilteredAttributesCaching.cs" />
     <None Include="ReflectionTestCases\PropertyOrder.cs" />
+    <None Include="SimpleTestCases\ReflectionMemberType.cs" />
     <None Include="SimpleTestCases\ArrayFromInt64.cs" />
     <None Include="SimpleTestCases\FloatArrayInitializer.cs" />
     <None Include="SimpleTestCases\StaticConstructorAndFieldAccess.cs" />
-- 
1.9.3


From fb12c57ff79da2c680505b24c863bed3c7e24080 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Sun, 25 May 2014 22:36:40 -0700
Subject: [PATCH 09/10] Extract method/field info for expression trees.

---
 JSIL/AST/JSExpressionTypes.cs                      | 25 ++++++++++
 JSIL/AST/JSIdentifierTypes.cs                      |  8 +++
 JSIL/ILBlockTranslator.cs                          |  8 ++-
 JSIL/JavascriptAstEmitter.cs                       | 57 ++++++++++++++++++++++
 JSIL/Transforms/CacheSignatures.cs                 |  5 ++
 .../StaticAnalysis/EmulateStructAssignment.cs      |  1 +
 Libraries/JSIL.Bootstrap.Linq.js                   | 20 +++++++-
 Libraries/JSIL.Core.js                             | 31 ++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Linq.cs                 | 18 +++++++
 Proxies/Reflection.cs                              |  6 +++
 10 files changed, 175 insertions(+), 4 deletions(-)

diff --git a/JSIL/AST/JSExpressionTypes.cs b/JSIL/AST/JSExpressionTypes.cs
index d6a2a6e..394415f 100644
--- a/JSIL/AST/JSExpressionTypes.cs
+++ b/JSIL/AST/JSExpressionTypes.cs
@@ -757,6 +757,31 @@ public JSCachedTypeOfExpression (TypeReference type, int index)
         }
     }
 
+    public class JSMethodOfExpression : JSMethod
+    {
+        public JSMethodOfExpression(MethodReference reference, MethodInfo method, MethodTypeFactory methodTypes,
+            IEnumerable<TypeReference> genericArguments = null)
+            : base(reference, method, methodTypes, genericArguments)
+        {
+        }
+
+        public override bool HasGlobalStateDependency
+        {
+            get
+            {
+                return false;
+            }
+        }
+
+        public override bool IsConstant
+        {
+            get
+            {
+                return true;
+            }
+        }
+    }
+
     public class JSPublicInterfaceOfExpression : JSExpression {
         public JSPublicInterfaceOfExpression (JSExpression inner)
             : base(inner) {
diff --git a/JSIL/AST/JSIdentifierTypes.cs b/JSIL/AST/JSIdentifierTypes.cs
index d3217ad..f595e69 100644
--- a/JSIL/AST/JSIdentifierTypes.cs
+++ b/JSIL/AST/JSIdentifierTypes.cs
@@ -214,6 +214,14 @@ public class JSField : JSIdentifier {
         }
     }
 
+    public class JSFieldOfExpression : JSField
+    {
+        public JSFieldOfExpression(FieldReference reference, FieldInfo field)
+            : base(reference, field)
+        {
+        }
+    }
+
     public class JSProperty : JSIdentifier {
         public readonly MemberReference Reference;
         public readonly PropertyInfo Property;
diff --git a/JSIL/ILBlockTranslator.cs b/JSIL/ILBlockTranslator.cs
index 5a634b5..8cf4977 100644
--- a/JSIL/ILBlockTranslator.cs
+++ b/JSIL/ILBlockTranslator.cs
@@ -533,6 +533,10 @@ TypeReference resultType
             switch (method.Method.Member.FullName) {
                 // Doing this replacement here enables more elimination of temporary variables
                 case "System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)":
+                case "System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle)":
+                case "System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)":
+                case "System.Reflection.FieldInfo System.Reflection.FieldInfo::GetFieldFromHandle(System.RuntimeFieldHandle)":
+                case "System.Reflection.FieldInfo System.Reflection.FieldInfo::GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)":
                     return arguments.First();
 
                 case "T JSIL.Builtins::CreateNamedFunction(System.String,System.String[],System.String,System.Object)":
@@ -2911,12 +2915,12 @@ TypeReference resultType
 
         protected JSExpression Translate_Ldtoken (ILExpression node, MethodReference method) {
             var methodInfo = GetMethod(method);
-            return new JSMethod(method, methodInfo, MethodTypes);
+            return new JSMethodOfExpression(method, methodInfo, MethodTypes);
         }
 
         protected JSExpression Translate_Ldtoken (ILExpression node, FieldReference field) {
             var fieldInfo = GetField(field);
-            return new JSField(field, fieldInfo);
+            return new JSFieldOfExpression(field, fieldInfo);
         }
 
         public static bool NeedsExplicitThis (
diff --git a/JSIL/JavascriptAstEmitter.cs b/JSIL/JavascriptAstEmitter.cs
index 4e32df8..fa366b5 100644
--- a/JSIL/JavascriptAstEmitter.cs
+++ b/JSIL/JavascriptAstEmitter.cs
@@ -942,6 +942,63 @@ Configuration configuration
             }
         }
 
+        public void VisitNode(JSMethodOfExpression moe)
+        {
+            var methodName = Util.EscapeIdentifier(moe.Method.GetName(true), EscapingMode.MemberIdentifier);
+
+            Output.WriteRaw("JSIL.GetMethodInfo");
+            Output.LPar();
+
+            Output.Identifier(
+                moe.Reference.DeclaringType, ReferenceContext, IncludeTypeParens.Peek()
+            );
+            Output.Comma();
+
+            Output.WriteRaw("\"");
+            Output.Identifier(methodName);
+            Output.WriteRaw("\"");
+            Output.Comma();
+
+            SignatureCacher.WriteSignatureToOutput(
+                Output, Stack.OfType<JSFunctionExpression>().FirstOrDefault(),
+                moe.Reference, moe.Method.Signature, ReferenceContext, false
+            );
+            Output.Comma();
+
+            Output.Value(moe.Method.IsStatic);
+
+            if (moe.GenericArguments != null && moe.GenericArguments.Any())
+            {
+                Output.Comma();
+                Output.OpenBracket();
+                Output.CommaSeparatedList(moe.GenericArguments, ReferenceContext);
+                Output.CloseBracket();
+            }
+
+            Output.RPar();
+        }
+
+        public void VisitNode(JSFieldOfExpression moe)
+        {
+            var fieldName = Util.EscapeIdentifier(moe.Field.ChangedName ?? moe.Field.Name, EscapingMode.MemberIdentifier);
+
+            Output.WriteRaw("JSIL.GetFieldInfo");
+            Output.LPar();
+
+            Output.Identifier(
+                moe.Reference.DeclaringType, ReferenceContext, IncludeTypeParens.Peek()
+            );
+            Output.Comma();
+
+            Output.WriteRaw("\"");
+            Output.Identifier(fieldName);
+            Output.WriteRaw("\"");
+            Output.Comma();
+
+            Output.Value(moe.Field.IsStatic);
+
+            Output.RPar();
+        }
         public void VisitNode (JSPublicInterfaceOfExpression poe) {
             VisitChildren(poe);
 
diff --git a/JSIL/Transforms/CacheSignatures.cs b/JSIL/Transforms/CacheSignatures.cs
index e32cf5f..31a2071 100644
--- a/JSIL/Transforms/CacheSignatures.cs
+++ b/JSIL/Transforms/CacheSignatures.cs
@@ -253,6 +253,11 @@ public class CacheSet {
             }
         }
 
+        public void VisitNode(JSMethodOfExpression methodOf)
+        {
+            CacheSignature(methodOf.Reference, methodOf.Method.Signature, false);
+        }
+
         public void VisitNode (JSInvocationExpression invocation) {
             var jsm = invocation.JSMethod;
             MethodInfo method = null;
diff --git a/JSIL/Transforms/StaticAnalysis/EmulateStructAssignment.cs b/JSIL/Transforms/StaticAnalysis/EmulateStructAssignment.cs
index 8b036a6..3118b06 100644
--- a/JSIL/Transforms/StaticAnalysis/EmulateStructAssignment.cs
+++ b/JSIL/Transforms/StaticAnalysis/EmulateStructAssignment.cs
@@ -155,6 +155,7 @@ bool optimizeCopies
                 (value is JSPassByReferenceExpression) ||
                 (value is JSNewBoxedVariable) ||
                 (value is JSDefaultValueLiteral) ||
+                (value is JSFieldOfExpression) ||
                 ((iae != null) && ((iae.Target is JSNewExpression) || (iae.Target is JSDefaultValueLiteral)))
             ) {
                 return false;
diff --git a/Libraries/JSIL.Bootstrap.Linq.js b/Libraries/JSIL.Bootstrap.Linq.js
index 3d7762e..510d6c5 100644
--- a/Libraries/JSIL.Bootstrap.Linq.js
+++ b/Libraries/JSIL.Bootstrap.Linq.js
@@ -722,8 +722,24 @@ JSIL.ImplementExternals("System.Linq.Expressions.ParameterExpression", function
         $.Boolean
       ], []), 
     function Make (type, name, isByRef) {
-      // FIXME
-      return new System.Linq.Expressions.ParameterExpression(name);
+      var experession = new System.Linq.Expressions.ParameterExpression(name);
+      experession._type = type;
+      experession._isByRef = isByRef;
+      return experession;
+    }
+  );
+
+  $.Method({Static:false , Public:true}, "get_Type", 
+    new JSIL.MethodSignature($jsilcore.TypeRef("System.Type"), [], []), 
+    function get_Type() {
+      return this._type;
+    }
+  );
+  
+  $.Method({Static:false , Public:true}, "get_IsByRef", 
+    new JSIL.MethodSignature($jsilcore.TypeRef("System.Boolean"), [], []), 
+    function get_IsByRef() {
+      return this._isByRef;
     }
   );
 });
diff --git a/Libraries/JSIL.Core.js b/Libraries/JSIL.Core.js
index 969f4ff..2edb39b 100644
--- a/Libraries/JSIL.Core.js
+++ b/Libraries/JSIL.Core.js
@@ -9413,4 +9413,35 @@ JSIL.ValidateArgumentTypes = function (types) {
       JSIL.RuntimeError("Argument type list must only contain type objects: " + JSON.stringify(item));
     }
   }
+};
+
+JSIL.GetMethodInfo = function(typeObject, name, signature, isStatic, methodGenericParameters){
+  var methods = JSIL.GetMembersInternal(
+    typeObject.__Type__, $jsilcore.BindingFlags.$Flags("DeclaredOnly", "Public", "NonPublic", isStatic ? "Static" : "Instance"), "$AllMethods", name
+  );
+  for (var i = 0, l = methods.length; i < l; i++) {
+    var method = methods[i];
+
+    if (method._data.signature.Hash == signature.Hash){
+      if (JSIL.IsArray(methodGenericParameters)) {
+        var genericParameterTypes = [];
+        for (var i = 0, l = methodGenericParameters.length; i < l; i++) {
+          genericParameterTypes.push(methodGenericParameters[i].get().__Type__);
+        }
+        return method.MakeGenericMethod(genericParameterTypes);
+      }
+      return method;
+    }
+  }
+  return null; 
+};
+
+JSIL.GetFieldInfo = function(typeObject, name, isStatic){
+  var fields = JSIL.GetMembersInternal(
+    typeObject.__Type__, $jsilcore.BindingFlags.$Flags("DeclaredOnly", "Public", "NonPublic", isStatic ? "Static" : "Instance"), "FieldInfo", name
+  );
+  if (fields.length == 1) {
+    return fields[0]; 
+  }
+  return null;
 };
\ No newline at end of file
diff --git a/Proxies/BCL/JSIL.Bootstrap.Linq.cs b/Proxies/BCL/JSIL.Bootstrap.Linq.cs
index d6bf8a9..7106085 100644
--- a/Proxies/BCL/JSIL.Bootstrap.Linq.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.Linq.cs
@@ -216,5 +216,23 @@ private static ParameterExpression Make(Type type, string name, bool flag)
         {
             throw new NotImplementedException();
         }
+
+        public override Type Type
+        {
+            [JSExternal]
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        public bool IsByRef
+        {
+            [JSExternal]
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
     }
 }
diff --git a/Proxies/Reflection.cs b/Proxies/Reflection.cs
index fcf8b8d..0b8075a 100644
--- a/Proxies/Reflection.cs
+++ b/Proxies/Reflection.cs
@@ -40,6 +40,12 @@ public abstract class TypeProxy {
         public static Type GetType (string typeName, bool throwOnFail, bool ignoreCase) {
             throw new NotImplementedException();
         }
+
+        [JSReplacement("$this === $other")]
+        public virtual bool IsEquivalentTo(Type other)
+        {
+            throw new NotImplementedException();
+        }
     }
 
     [JSProxy(
-- 
1.9.3


From 2a67b9064590b16c0051265231cd08e167f4c531 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Mon, 2 Jun 2014 20:51:20 -0700
Subject: [PATCH 10/10] Test added for extracting method info from Expression.

--HG--
extra : source : 0066fc1f9067cb5db7866daa768c787e32910fb0
extra : amend_source : 78288d0887ac92d3373ada534bf9aeaa4d643a72
---
 .../ExpressionsTest.cs                             | 126 +++++++++++++++++++++
 Tests/Tests.csproj                                 |   1 +
 2 files changed, 127 insertions(+)
 create mode 100644 Tests/SimpleTestCasesForTranslatedBcl/ExpressionsTest.cs

diff --git a/Tests/SimpleTestCasesForTranslatedBcl/ExpressionsTest.cs b/Tests/SimpleTestCasesForTranslatedBcl/ExpressionsTest.cs
new file mode 100644
index 0000000..f6d12cc
--- /dev/null
+++ b/Tests/SimpleTestCasesForTranslatedBcl/ExpressionsTest.cs
@@ -0,0 +1,126 @@
+ï»¿using System;
+using System.Linq.Expressions;
+using System.Reflection;
+
+public static class Program
+{
+    public static A Field;
+
+    public static void Main(string[] args)
+    {
+        WriteMethod(() => StaticMethodNonGeneric());
+        WriteMethod(() => StaticMethodGeneric<A>());
+
+        WriteMethod((NonGenericClass nonGenericClass) => nonGenericClass.InstanceNonGenericMethod());
+        WriteMethod((NonGenericClass nonGenericClass) => nonGenericClass.InstanceGenericMethod<A>());
+
+        WriteMethod((INonGenericInterface interfaceInstance) => interfaceInstance.InstanceNonGenericMethod());
+        WriteMethod((INonGenericInterface interfaceInstance) => interfaceInstance.InstanceGenericMethod<A>());
+
+        WriteMethod((GenericClass<B> genericClass) => genericClass.InstanceNonGenericMethod());
+        WriteMethod((GenericClass<B> genericClass) => genericClass.InstanceGenericMethod<A>());
+
+        WriteMethod((IGenericInterface<B> interfaceGenericInstance) => interfaceGenericInstance.InstanceNonGenericMethod());
+        WriteMethod((IGenericInterface<B> interfaceGenericInstance) => interfaceGenericInstance.InstanceGenericMethod<A>());
+
+        WriteField(() => Field);
+        WriteField((NonGenericClass nonGenericClass) => nonGenericClass.FieldOfNonGenericClass);
+        WriteField((GenericClass<B> genericClass) => genericClass.FieldOfNonGenericClass1);
+        WriteField((GenericClass<B> genericClass) => genericClass.FieldOfNonGenericClass2);
+    }
+
+    public static void StaticMethodNonGeneric()
+    { }
+
+    public static T StaticMethodGeneric<T>()
+    {
+        return default(T);
+    }
+
+    private static void WriteMethod(Expression<Action> expression)
+    {
+        WriteMethodInternal(expression);
+    }
+
+    private static void WriteMethod<T>(Expression<Action<T>> expression)
+    {
+        WriteMethodInternal(expression);
+    }
+
+    private static void WriteMethodInternal(LambdaExpression expression)
+    {
+        var mi = ExtractMethodInfo(expression);
+        Console.WriteLine("{2} {0}.{1}(...)", mi.DeclaringType.Name, mi.Name, mi.ReturnType.Name);
+    }
+
+    private static void WriteField<TField>(Expression<Func<TField>> expression)
+    {
+        WriteFieldInternal(expression);
+    }
+
+    private static void WriteField<TInput, TField>(Expression<Func<TInput, TField>> expression)
+    {
+        WriteFieldInternal(expression);
+    }
+
+    private static void WriteFieldInternal(LambdaExpression expression)
+    {
+        var mi = ExtractFieldInfo(expression);
+        Console.WriteLine("{2} {0}.{1}", mi.DeclaringType.Name, mi.Name, mi.FieldType.Name);
+    }
+
+    private static MethodInfo ExtractMethodInfo(LambdaExpression expression)
+    {
+        return ((MethodCallExpression)(expression.Body)).Method;
+    }
+
+    private static FieldInfo ExtractFieldInfo(LambdaExpression expression)
+    {
+        return (FieldInfo)((MemberExpression)(expression.Body)).Member;
+    }
+}
+
+public interface INonGenericInterface
+{
+    void InstanceNonGenericMethod();
+    T InstanceGenericMethod<T>();
+}
+
+public class NonGenericClass : INonGenericInterface
+{
+    public A FieldOfNonGenericClass;
+
+    public void InstanceNonGenericMethod()
+    {
+    }
+
+    public T InstanceGenericMethod<T>()
+    {
+        return default(T);
+    }
+}
+
+public interface IGenericInterface<T>
+{
+    T InstanceNonGenericMethod();
+    T2 InstanceGenericMethod<T2>();
+}
+
+public class GenericClass<T> : IGenericInterface<T>
+{
+    public A FieldOfNonGenericClass1;
+    public T FieldOfNonGenericClass2;
+
+    public T InstanceNonGenericMethod()
+    {
+        return default(T);
+    }
+
+    public T2 InstanceGenericMethod<T2>()
+    {
+        return default(T2);
+    }
+}
+
+public class A { }
+public class B { }
\ No newline at end of file
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index a96779e..ad4a102 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -830,6 +830,7 @@
     <None Include="IOTestCases\BasicStreamNavigation.cs" />
     <Compile Include="TestUtil.cs" />
     <Compile Include="VerbatimTests.cs" />
+    <None Include="SimpleTestCasesForTranslatedBcl\ExpressionsTest.cs" />
     <None Include="SimpleTestCases\ObjectExpression_Enumerable.fs" />
     <None Include="InterfaceTestCases\InterfaceColliding.cs" />
     <None Include="InterfaceTestCases\InterfaceCollidingImplicit.cs" />
-- 
1.9.3

