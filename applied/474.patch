From 2c2fb6ba538a10e16ddea8b03ca89c8d56a714e3 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Mon, 5 May 2014 22:54:40 -0700
Subject: [PATCH] Added sorting in $BuildMethodGroups based on distance from
 type. Fix #368.

---
 Libraries/JSIL.Core.js            | 24 +++++++++++--
 Tests/SimpleTestCases/Issue368.cs | 76 +++++++++++++++++++++++++++++++++++++++
 Tests/Tests.csproj                |  1 +
 3 files changed, 98 insertions(+), 3 deletions(-)
 create mode 100644 Tests/SimpleTestCases/Issue368.cs

diff --git a/Libraries/JSIL.Core.js b/Libraries/JSIL.Core.js
index dfe624f..99d7d23 100644
--- a/Libraries/JSIL.Core.js
+++ b/Libraries/JSIL.Core.js
@@ -4056,6 +4056,13 @@ JSIL.$BuildMethodGroups = function (typeObject, publicInterface, forceLazyMethod
 
     JSIL.$ApplyMemberHiding(typeObject, methodList, resolveContext);
   }
+  
+  var record = function (distance, signature) {
+    this.distance = distance;
+    this.signature = signature;
+  };
+  
+  var typesHiearchy = JSIL.GetTypeAndBases(typeObject); 
 
   for (var key in methodsByName) {
     var methodList = methodsByName[key];
@@ -4065,12 +4072,23 @@ JSIL.$BuildMethodGroups = function (typeObject, publicInterface, forceLazyMethod
     var isStatic = methodList[0]._descriptor.Static;
     var signature = methodList[0]._data.signature;
 
-    var entries = [];
+    var entriesToSort = []; 
 
     for (var i = 0, l = methodList.length; i < l; i++) {
-      var method = methodList[i];
+       var method = methodList[i];
+       entriesToSort.push(new record(typesHiearchy.indexOf(method._typeObject), method._data.signature));
+    }
+    
+    entriesToSort.sort(function (lhs, rhs) {
+      return JSIL.CompareValues(lhs.distance, rhs.distance);
+    });
+
+    var entries = [];
+
+    for (var i = 0, l = entriesToSort.length; i < l; i++) {
+      var method = entriesToSort[i];
 
-      entries.push(method._data.signature);
+      entries.push(method.signature);
     }
 
     var target = isStatic ? publicInterface : publicInterface.prototype;
diff --git a/Tests/SimpleTestCases/Issue368.cs b/Tests/SimpleTestCases/Issue368.cs
new file mode 100644
index 0000000..e2e664e
--- /dev/null
+++ b/Tests/SimpleTestCases/Issue368.cs
@@ -0,0 +1,76 @@
+ï»¿using System;
+
+public static class Program
+{
+    public static void Main(string[] args)
+    {
+        var br = new BaseResult();
+        var dr = new DerivedResult();
+
+        var bas = new Base();
+        var derived = new Derived();
+
+        bas.Method();
+        bas.MethodWithParameter1(br);
+        bas.MethodWithParameter1(dr);
+        bas.MethodWithParameter2(dr);
+
+        bas = derived;
+        bas.Method();
+        bas.MethodWithParameter1(br);
+        bas.MethodWithParameter1(dr);
+        bas.MethodWithParameter2(dr);
+
+        derived.Method();
+        derived.MethodWithParameter1(br);
+        derived.MethodWithParameter1(dr);
+        derived.MethodWithParameter2(br);
+        derived.MethodWithParameter2(dr);
+    }
+}
+
+public class Base
+{
+    public BaseResult Method()
+    {
+        Console.WriteLine("Base Method");
+        return null;
+    }
+
+    public void MethodWithParameter1(BaseResult r1)
+    {
+        Console.WriteLine("Base MethodWithParameter1");
+    }
+
+    public void MethodWithParameter2(DerivedResult r1)
+    {
+        Console.WriteLine("Base MethodWithParameter2");
+    }
+}
+
+public class Derived : Base
+{
+    public DerivedResult Method()
+    {
+        Console.WriteLine("Derived Method");
+        return null;
+    }
+
+    public void MethodWithParameter1(DerivedResult r1)
+    {
+        Console.WriteLine("Derived MethodWithParameter1");
+    }
+
+    public void MethodWithParameter2(BaseResult r1)
+    {
+        Console.WriteLine("Derived MethodWithParameter2");
+    }
+}
+
+public class BaseResult
+{
+}
+
+public class DerivedResult : BaseResult
+{
+}
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index 6a839ab..77281f9 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -853,6 +853,7 @@
     <None Include="SimpleTestCases\Issue364_1.cs" />
     <None Include="SimpleTestCases\Issue364_2.cs" />
     <None Include="SimpleTestCases\Issue364_3.cs" />
+    <None Include="SimpleTestCases\Issue368.cs" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\JSIL\JSIL.csproj">
-- 
1.9.3

