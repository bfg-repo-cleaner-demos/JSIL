From 6713d5e4dc92b065deb707b668f70ee863d701c3 Mon Sep 17 00:00:00 2001
From: MichaelD! <michael@dragonspark.us>
Date: Fri, 30 May 2014 13:57:07 -0700
Subject: [PATCH 1/3] Fixes #381 and #508

Fixes #381 and #508
Adding support for Generic Closures.  Not the best implementation, but
fixes the issues.  There might be a better more comprehensive
implementation around closures at a later point.
---
 JSIL/JavascriptAstEmitter.cs      | 22 +++++++++++-----------
 JSIL/JavascriptFormatter.cs       | 21 ++++++++++++---------
 Tests/GenericTestFixture.cs       | 10 +++++-----
 Tests/SimpleTestCases/Issue381.cs | 18 ++++++++++++++++++
 Tests/SimpleTestCases/Issue508.cs | 22 ++++++++++++++++++++++
 Tests/Tests.csproj                |  2 ++
 6 files changed, 70 insertions(+), 25 deletions(-)
 create mode 100644 Tests/SimpleTestCases/Issue381.cs
 create mode 100644 Tests/SimpleTestCases/Issue508.cs

diff --git a/JSIL/JavascriptAstEmitter.cs b/JSIL/JavascriptAstEmitter.cs
index 4e32df8..3091d4e 100644
--- a/JSIL/JavascriptAstEmitter.cs
+++ b/JSIL/JavascriptAstEmitter.cs
@@ -1,16 +1,13 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.IO;
-using System.Linq;
-using System.Text;
-using System.Text.RegularExpressions;
-using ICSharpCode.Decompiler.ILAst;
+﻿using ICSharpCode.Decompiler;
 using JSIL.Ast;
 using JSIL.Internal;
 using JSIL.Transforms;
 using JSIL.Translator;
 using Mono.Cecil;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text.RegularExpressions;
 
 namespace JSIL {
     public enum BlockType {
@@ -1114,10 +1111,13 @@ Configuration configuration
                 Output.CurrentMethod = null;
             }
 
-            Output.OpenFunction(
+	        Output.OpenFunction(
                 function.DisplayName,
-                (o) => o.WriteParameterList(function.Parameters)
-            );
+	            o =>
+	            {
+					var remove = function.Method != null && function.Method.Reference.IsGenericClosure() ? function.Parameters.Where( x => function.Method.Reference.GenericParameters.Any( y => x.Name == y.Name ) ) : Enumerable.Empty<JSVariable>();
+					o.WriteParameterList( function.Parameters.Except( remove ) );
+	            } );
 
             if (function.TemporaryVariableCount > 0) {
                 Output.WriteRaw("var ");
diff --git a/JSIL/JavascriptFormatter.cs b/JSIL/JavascriptFormatter.cs
index 267646b..33774af 100644
--- a/JSIL/JavascriptFormatter.cs
+++ b/JSIL/JavascriptFormatter.cs
@@ -1,16 +1,13 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.IO;
-using System.Linq;
-using System.Text;
+﻿using ICSharpCode.Decompiler;
 using ICSharpCode.Decompiler.ILAst;
 using JSIL.Ast;
-using JSIL.Internal;
 using JSIL.Translator;
 using Mono.Cecil;
+using System;
+using System.Collections.Generic;
 using System.Globalization;
-using JSIL;
+using System.IO;
+using System.Linq;
 
 namespace JSIL.Internal {
     public enum ListValueType {
@@ -570,7 +567,7 @@ public class JavascriptFormatter {
                         return;
                     }
 
-                    if (ownerMethodIdentifier.Equals(ownerMethod, context.EnclosingMethod, TypeInfo)) {
+	                if (ownerMethodIdentifier.Equals(ownerMethod, context.EnclosingMethod, TypeInfo)) {
                         Identifier(gp.Name);
 
                         return;
@@ -585,6 +582,12 @@ public class JavascriptFormatter {
                         return;
                     }
 
+	                if ( ownerMethod.IsGenericClosure() )
+	                {
+		                Identifier(gp.Name);
+                        return;
+	                }
+
                     throw new NotImplementedException(String.Format(
                         "Unimplemented form of generic method parameter: '{0}'.",
                         gp
diff --git a/Tests/GenericTestFixture.cs b/Tests/GenericTestFixture.cs
index 4e7242d..a2509a6 100644
--- a/Tests/GenericTestFixture.cs
+++ b/Tests/GenericTestFixture.cs
@@ -1,13 +1,13 @@
-﻿using System;
+﻿using JSIL.Internal;
+using JSIL.Translator;
+using Microsoft.Win32;
+using NUnit.Framework;
+using System;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
 using System.Linq;
 using System.Reflection;
-using JSIL.Internal;
-using JSIL.Translator;
-using Microsoft.Win32;
-using NUnit.Framework;
 
 namespace JSIL.Tests {
     public class GenericTestFixture : IDisposable {
diff --git a/Tests/SimpleTestCases/Issue381.cs b/Tests/SimpleTestCases/Issue381.cs
new file mode 100644
index 0000000..b918e35
--- /dev/null
+++ b/Tests/SimpleTestCases/Issue381.cs
@@ -0,0 +1,18 @@
+﻿using System;
+using System.Collections.Generic;
+
+public static class Program
+{
+    public static void Main(string[] args)
+    {
+        var a = GetGenericList<object>();
+        Console.WriteLine(a);
+    }
+
+    public static List<T> GetGenericList<T>()
+    {
+        Func<List<T>> listCreator = () => new List<T>();
+	    var result = listCreator();
+		return result;
+    }
+}
\ No newline at end of file
diff --git a/Tests/SimpleTestCases/Issue508.cs b/Tests/SimpleTestCases/Issue508.cs
new file mode 100644
index 0000000..64493b5
--- /dev/null
+++ b/Tests/SimpleTestCases/Issue508.cs
@@ -0,0 +1,22 @@
+﻿using System;
+
+public static class Program
+{
+    public static void Main(string[] args)
+    {
+    }
+
+    private static void FailingMethod<T>()
+    {
+        Func<GenericClassWithTwoConstructors<T>> f = () => new GenericClassWithTwoConstructors<T>();
+    }
+}
+
+public class GenericClassWithTwoConstructors<T>
+{
+    public GenericClassWithTwoConstructors(string str)
+    {}
+
+    public GenericClassWithTwoConstructors()
+    {}
+}
\ No newline at end of file
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index 31edce7..1f55521 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -291,6 +291,8 @@
     <None Include="FailingTestCases\ReflectionTypeGenericInfo13.cs" />
     <None Include="Int64TestCases\Int64ToString.cs" />
     <None Include="PerformanceTestCases\EnumCasts.cs" />
+    <None Include="SimpleTestCases\Issue508.cs" />
+    <None Include="SimpleTestCases\Issue381.cs" />
     <Compile Include="TypeInformationTests.cs" />
     <None Include="TestCases\LongArithmetic.cs" />
     <None Include="InterfaceTestCases\NestedInterfaces.cs" />
-- 
1.9.3


From ebe1d7d312b48f04e49f297e58fde6e9bd3be51f Mon Sep 17 00:00:00 2001
From: MichaelD! <michael@dragonspark.us>
Date: Fri, 30 May 2014 14:43:19 -0700
Subject: [PATCH 2/3] Getting in Missing Extension Method, Improving Tests

Related to Issues #381 and #508.
---
 JSIL/Util.cs                      | 18 ++++++++++++++++++
 Tests/SimpleTestCases/Issue508.cs |  8 ++++++--
 2 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/JSIL/Util.cs b/JSIL/Util.cs
index 8a1278a..b18ad8f 100644
--- a/JSIL/Util.cs
+++ b/JSIL/Util.cs
@@ -9,6 +9,7 @@
 using System.Text;
 using System.Text.RegularExpressions;
 using System.Threading;
+using ICSharpCode.Decompiler;
 using ICSharpCode.NRefactory.CSharp;
 using JSIL.Ast;
 using Mono.Cecil;
@@ -22,6 +23,23 @@ public enum EscapingMode {
     }
 
     public static class Util {
+		public static bool IsGenericClosure(this MethodReference member)
+		{
+			if ( member.HasGenericParameters && member.HasGeneratedName() )
+			{
+				var definition = member as MethodDefinition;
+				if ( definition != null )
+				{
+					var index = member.Name.IndexOf( ">" );
+					var result = definition.CustomAttributes.Any( x => x.AttributeType.Name == "CompilerGeneratedAttribute" ) && index > -1 && member.Name.Substring( index + 1, 1 ) == "b";
+					return result;
+				}
+			}
+			return false;
+		}
+		
+
+
         public static readonly HashSet<string> ReservedWords = new HashSet<string> {
             "break", "do", "instanceof", "typeof",
             "case", "else", "new", "var",
diff --git a/Tests/SimpleTestCases/Issue508.cs b/Tests/SimpleTestCases/Issue508.cs
index 64493b5..65f03fb 100644
--- a/Tests/SimpleTestCases/Issue508.cs
+++ b/Tests/SimpleTestCases/Issue508.cs
@@ -4,11 +4,15 @@ public static class Program
 {
     public static void Main(string[] args)
     {
+		var a = FailingMethod<object>();
+        Console.WriteLine(a);
     }
 
-    private static void FailingMethod<T>()
+    private static GenericClassWithTwoConstructors<T> FailingMethod<T>()
     {
         Func<GenericClassWithTwoConstructors<T>> f = () => new GenericClassWithTwoConstructors<T>();
+	    var result = f();
+	    return result;
     }
 }
 
@@ -19,4 +23,4 @@ public GenericClassWithTwoConstructors(string str)
 
     public GenericClassWithTwoConstructors()
     {}
-}
\ No newline at end of file
+}	
\ No newline at end of file
-- 
1.9.3


From 496e8ec29f188f444506c186c0003e31762341b8 Mon Sep 17 00:00:00 2001
From: MichaelD! <michael@dragonspark.us>
Date: Fri, 30 May 2014 16:18:24 -0700
Subject: [PATCH 3/3] Fixing formatting and adding TestType.

---
 Tests/SimpleTestCases/Issue508.cs | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/Tests/SimpleTestCases/Issue508.cs b/Tests/SimpleTestCases/Issue508.cs
index 65f03fb..b44d3f4 100644
--- a/Tests/SimpleTestCases/Issue508.cs
+++ b/Tests/SimpleTestCases/Issue508.cs
@@ -4,7 +4,7 @@ public static class Program
 {
     public static void Main(string[] args)
     {
-		var a = FailingMethod<object>();
+        var a = FailingMethod<TestType>();
         Console.WriteLine(a);
     }
 
@@ -16,11 +16,16 @@ private static GenericClassWithTwoConstructors<T> FailingMethod<T>()
     }
 }
 
+public class TestType
+{}
+
 public class GenericClassWithTwoConstructors<T>
 {
-    public GenericClassWithTwoConstructors(string str)
-    {}
-
+    public GenericClassWithTwoConstructors( string str )
+    {
+    	
+    }
+    
     public GenericClassWithTwoConstructors()
     {}
 }	
\ No newline at end of file
-- 
1.9.3

