From 7ac8000a79061d6824e3906eaac0f5b91c23ce91 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Thu, 10 Apr 2014 09:44:23 -0700
Subject: [PATCH 1/4] BCL proxies added.

---
 .gitignore                              |   5 +-
 JSIL.sln                                |   9 +
 JSIL_NoXNA.sln                          |   9 +
 Proxies/BCL/JSIL.Bootstrap.DateTime.cs  | 287 ++++++++++++++++++++++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Linq.cs      | 220 ++++++++++++++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Resources.cs | 107 ++++++++++++
 Proxies/BCL/JSIL.Bootstrap.Text.cs      |  79 +++++++++
 Proxies/BCL/JSIL.Bootstrap.cs           | 246 +++++++++++++++++++++++++++
 Proxies/BCL/JSIL.Core.Reflection.cs     |  18 ++
 Proxies/BCL/JSIL.IO.cs                  |  84 ++++++++++
 Proxies/BCL/JSIL.Unsafe.cs              |  25 +++
 Proxies/BCL/JSIL.XML.cs                 |  43 +++++
 Proxies/BCL/Properties/AssemblyInfo.cs  |  36 ++++
 Proxies/BCL/Proxies.Bcl.csproj          |  64 +++++++
 14 files changed, 1230 insertions(+), 2 deletions(-)
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.DateTime.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.Linq.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.Resources.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.Text.cs
 create mode 100644 Proxies/BCL/JSIL.Bootstrap.cs
 create mode 100644 Proxies/BCL/JSIL.Core.Reflection.cs
 create mode 100644 Proxies/BCL/JSIL.IO.cs
 create mode 100644 Proxies/BCL/JSIL.Unsafe.cs
 create mode 100644 Proxies/BCL/JSIL.XML.cs
 create mode 100644 Proxies/BCL/Properties/AssemblyInfo.cs
 create mode 100644 Proxies/BCL/Proxies.Bcl.csproj

diff --git a/.gitignore b/.gitignore
index 2e40b14..aea460e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -17,6 +17,7 @@ Proxies/obj
 Proxies/bin
 Proxies/XNA/obj
 Proxies/XNA/bin
+Proxies/BCL/obj
 Examples/simpleray
 Examples/bin
 /bin
@@ -65,8 +66,8 @@ _UpgradeReport_Files
 /Upstream/FFMPEG/*.exe
 /Upstream/FFMPEG/licenses
 /Upstream/OggEnc/*.exe
-/Upstream/XapParse/obj
-/Upstream/XapParse/bin
+/Upstream/xapparse/obj
+/Upstream/xapparse/bin
 Skeletons/*.js
 Corlib/*.js
 Corlib/*.nlp
diff --git a/JSIL.sln b/JSIL.sln
index fc54967..0bb663e 100644
--- a/JSIL.sln
+++ b/JSIL.sln
@@ -46,6 +46,8 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Try", "Try\Try.csproj", "{2
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SmokeTests", "SmokeTests\SmokeTests.csproj", "{99D82424-C7FB-4D78-AEC6-700DE220580F}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Proxies.Bcl", "Proxies\BCL\Proxies.Bcl.csproj", "{261C3CF3-D25E-4F17-8973-5D0F761FE422}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -170,6 +172,13 @@ Global
 		{99D82424-C7FB-4D78-AEC6-700DE220580F}.Release|Any CPU.ActiveCfg = Release|x86
 		{99D82424-C7FB-4D78-AEC6-700DE220580F}.Release|x86.ActiveCfg = Release|x86
 		{99D82424-C7FB-4D78-AEC6-700DE220580F}.Release|x86.Build.0 = Release|x86
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/JSIL_NoXNA.sln b/JSIL_NoXNA.sln
index d5e91b8..95462f4 100644
--- a/JSIL_NoXNA.sln
+++ b/JSIL_NoXNA.sln
@@ -36,6 +36,8 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Proxies.4.0", "Proxies\Prox
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Try", "Try\Try.csproj", "{2869EA5F-86D6-4075-8539-61AA1FE94066}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Proxies.Bcl", "Proxies\BCL\Proxies.Bcl.csproj", "{261C3CF3-D25E-4F17-8973-5D0F761FE422}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -137,6 +139,13 @@ Global
 		{2869EA5F-86D6-4075-8539-61AA1FE94066}.Release|Any CPU.ActiveCfg = Release|x86
 		{2869EA5F-86D6-4075-8539-61AA1FE94066}.Release|x86.ActiveCfg = Release|x86
 		{2869EA5F-86D6-4075-8539-61AA1FE94066}.Release|x86.Build.0 = Release|x86
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Debug|x86.Build.0 = Debug|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/Proxies/BCL/JSIL.Bootstrap.DateTime.cs b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
new file mode 100644
index 0000000..2c32b1f
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
@@ -0,0 +1,287 @@
+ï»¿using System;
+using System.Globalization;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(TimeSpan), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_TimeSpan
+    {
+        [JSExternal]
+        public static TimeSpan FromMilliseconds(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromSeconds(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromMinutes(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromHours(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TimeSpan FromDays(double value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System.TimeSpan FromTicks(long value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System_TimeSpan operator +(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator ==(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator >(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator >=(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator !=(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator <(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool operator <=(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System_TimeSpan operator -(System_TimeSpan t1, System_TimeSpan t2)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System_TimeSpan operator -(System_TimeSpan t)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(long ticks)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(int hours, int minutes, int seconds)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(int days, int hours, int minutes, int seconds)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public int Days
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Hours 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Milliseconds 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Minutes 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public int Seconds 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public long Ticks
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalMilliseconds
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalSeconds  
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalMinutes 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalHours 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public double TotalDays 
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public static System.TimeSpan Parse(string s)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public override string ToString()
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+    [JSProxy(typeof(DateTime), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_DateTime
+    {
+        [JSExternal]
+        public System_DateTime(long ticks)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        private System_DateTime(ulong dateData)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_DateTime(int year, int month, int day)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public System_DateTime(int year, int month, int day, Calendar calendar)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static System.DateTime Now
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public static System.DateTime UtcNow { 
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public string ToLongTimeString()
+        {
+            throw new NotImplementedException();
+        }
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.Linq.cs b/Proxies/BCL/JSIL.Bootstrap.Linq.cs
new file mode 100644
index 0000000..d6bf8a9
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.Linq.cs
@@ -0,0 +1,220 @@
+ï»¿using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
+using System.Linq.Expressions;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(Enumerable), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceDeclared, false)]
+    public static class System_Linq_Enumerable
+    {
+        [JSExternal]
+        public static bool Any<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool Any<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicate)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TSource> AsEnumerable<TSource>(this IEnumerable<TSource> source)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static int Count<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource First<TSource>(this IEnumerable<TSource> source)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource First<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> Select<TSource, TResult>(IEnumerable<TSource> enumerable, Func<TSource, TResult> selector)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource[] ToArray<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static bool Contains<TSource>(IEnumerable<TSource> enumerable, TSource item)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> Cast<TResult>(IEnumerable enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static List<TSource> ToList<TSource>(IEnumerable<TSource> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource ElementAt<TSource>(IEnumerable<TSource> enumerable, int index)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static TSource ElementAtOrDefault<TSource>(IEnumerable<TSource> enumerable, int index)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> OfType<TResult>(IEnumerable enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TSource> Where<TSource>(IEnumerable<TSource> enumerable, Func<TSource, bool> predicat)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<int> Range(int from, int to)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static int Sum(IEnumerable<int> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static float Sum(IEnumerable<float> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static double Sum(IEnumerable<double> enumerable)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static IEnumerable<TResult> Empty<TResult>()
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+
+    [JSProxy(typeof(Expression), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Linq_Expressions_Expression
+    {
+        [JSExternal]
+        public static ConstantExpression Constant(object value)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static ConstantExpression Constant(object value, Type type)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static ParameterExpression Parameter(Type type)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static ParameterExpression Parameter(Type type, string name)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public static BinaryExpression Equal(Expression left, Expression right)
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+    [JSProxy(typeof(ConstantExpression), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Linq_Expressions_ConstantExpression
+    {
+        [JSExternal]
+        [JSReplaceConstructor]
+        public System_Linq_Expressions_ConstantExpression(object obj)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        private static ConstantExpression Make(object obj, Type type)
+        {
+            throw new NotImplementedException();
+        }
+    }
+
+    [JSProxy(typeof(ParameterExpression), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Linq_Expressions_ParameterExpression : Expression
+    {
+        [JSExternal]
+        private static ParameterExpression Make(Type type, string name, bool flag)
+        {
+            throw new NotImplementedException();
+        }
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.Resources.cs b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
new file mode 100644
index 0000000..5243248
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
@@ -0,0 +1,107 @@
+ï»¿using System;
+using System.Globalization;
+using System.Resources;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(ResourceManager), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Resources_ResourceManager
+    {
+    }
+
+    [JSProxy(typeof(ResourceSet), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Resources_ResourceSet
+    {
+    }
+
+    [JSProxy(typeof(CultureInfo), JSProxyMemberPolicy.ReplaceDeclared, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    public class System_Globalization_CultureInfo
+    {
+        [JSExternal]
+        [JSReplaceConstructor]
+        public System_Globalization_CultureInfo(string cultureId)
+        {
+            
+        }
+
+        [JSExternal]
+        [JSReplaceConstructor]
+        public System_Globalization_CultureInfo(string str, bool boolean)
+        {
+
+        }
+
+        [JSExternal]
+        public virtual object Clone()
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public string Name
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public string TwoLetterISOLanguageName
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public bool UseUserOverride
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public CultureInfo GetCultureByName(string str, bool boolean)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public CultureInfo GetCultureInfo(string str)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public CultureInfo GetCultureInfoByIetfLanguageTag(string str)
+        {
+            throw new NotImplementedException();
+        }
+
+        [JSExternal]
+        public CultureInfo CurrentUICulture
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        [JSExternal]
+        public CultureInfo CurrentCulture
+        {
+            get
+            {
+                throw new NotImplementedException();
+            }
+        }
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.Text.cs b/Proxies/BCL/JSIL.Bootstrap.Text.cs
new file mode 100644
index 0000000..7d69f40
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.Text.cs
@@ -0,0 +1,79 @@
+ï»¿using System.Text;
+using System.Text.RegularExpressions;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(string), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_String
+    {
+    }
+
+    [JSProxy(typeof(Encoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_Encoding
+    {
+    }
+
+    [JSProxy(typeof(ASCIIEncoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_ASCIIEncoding
+    {
+    }
+
+    [JSProxy(typeof(UTF8Encoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_UTF8Encoding
+    {
+    }
+
+    [JSProxy(typeof(UnicodeEncoding), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_UnicodeEncoding
+    {
+    }
+
+    [JSProxy(typeof(StringBuilder), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_StringBuilder
+    {
+    }
+
+    [JSProxy(typeof(Regex), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Regex
+    {
+    }
+
+    [JSProxy(typeof(MatchCollection), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_MatchCollection
+    {
+    }
+
+    [JSProxy(typeof(Capture), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Capture
+    {
+    }
+
+    [JSProxy(typeof(Group), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Group
+    {
+    }
+
+    [JSProxy(typeof(Match), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_Match
+    {
+    }
+
+    [JSProxy(typeof(GroupCollection), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Text_RegularExpressions_GroupCollection
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.Bootstrap.cs b/Proxies/BCL/JSIL.Bootstrap.cs
new file mode 100644
index 0000000..544e41c
--- /dev/null
+++ b/Proxies/BCL/JSIL.Bootstrap.cs
@@ -0,0 +1,246 @@
+ï»¿using System;
+using System.Collections;
+using System.Diagnostics;
+using System.IO;
+using System.Threading;
+using System.Xml.Serialization;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(Exception), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Exception
+    {
+    }
+
+    [JSProxy(typeof(SystemException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_SystemException
+    {
+    }
+
+    [JSProxy(typeof(InvalidCastException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_InvalidCastException
+    {
+    }
+
+    [JSProxy(typeof(InvalidOperationException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_InvalidOperationException
+    {
+    }
+
+    [JSProxy(typeof(FileNotFoundException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileNotFoundException
+    {
+    }
+
+    [JSProxy(typeof(FormatException), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_FormatException
+    {
+    }
+
+    [JSProxy(typeof(Console), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Console
+    {
+    }
+
+    [JSProxy(typeof(Debug), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Diagnostics_Debug
+    {
+    }
+
+    [JSProxy(typeof(Thread), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Threading_Thread
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.List`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_List_1
+    {
+    }
+
+    [JSProxy(typeof(ArrayList), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_ArrayList
+    {
+    }
+
+    [JSProxy("System.Collections.ObjectModel.Collection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_ObjectModel_Collection_1
+    {
+    }
+
+    [JSProxy("System.Collections.ObjectModel.ReadOnlyCollection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_ObjectModel_ReadOnlyCollection_1
+    {
+    }
+
+
+    [JSProxy("System.Collections.Generic.Stack`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Stack_1
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.Queue`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Queue_1
+    {
+    }
+
+    [JSProxy(typeof(Interlocked), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Threading_Interlocked
+    {
+    }
+
+    [JSProxy(typeof(Monitor), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Threading_Monitor
+    {
+    }
+
+    [JSProxy(typeof(Random), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Random
+    {
+    }
+
+    [JSProxy(typeof(Math), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Math
+    {
+    }
+
+    [JSProxy(typeof(Environment), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Environment
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.Dictionary`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Dictionary_2
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.KeyValuePair`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_KeyValuePair_2
+    {
+    }
+
+    [JSProxy(typeof(Nullable), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Nullable
+    {
+    }
+
+    [JSProxy("System.Nullable`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Nullable_1
+    {
+    }
+
+    [JSProxy(typeof(XmlSerializer), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_Serialization_XmlSerializer
+    {
+    }
+
+    [JSProxy(typeof(StackTrace), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_StackTrace
+    {
+    }
+
+    [JSProxy(typeof(StackFrame), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_StackFrame
+    {
+    }
+
+    [JSProxy(typeof(Enum), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Enum
+    {
+    }
+
+    [JSProxy(typeof(Activator), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Activator
+    {
+    }
+
+    [JSProxy(typeof(Stopwatch), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_Stopwatch
+    {
+    }
+
+    [JSProxy(typeof(GC), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_GC
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.HashSet`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_HashSet_1
+    {
+    }
+
+    [JSProxy(typeof(Convert), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Convert
+    {
+    }
+
+    [JSProxy(typeof(BitConverter), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_BitConverter
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.LinkedList`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Collections_Generic_LinkedList_1
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.LinkedListNode`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public static class System_Collections_Generic_LinkedListNode_1
+    {
+    }
+
+    [JSProxy("System.Collections.Generic.Comparer`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Collections_Generic_Comparer_1
+    {
+    }
+
+    [JSProxy(typeof(WeakReference), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_WeakReference
+    {
+    }
+
+    [JSProxy(typeof(Trace), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Diagnostics_Trace
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.Core.Reflection.cs b/Proxies/BCL/JSIL.Core.Reflection.cs
new file mode 100644
index 0000000..a92c2be
--- /dev/null
+++ b/Proxies/BCL/JSIL.Core.Reflection.cs
@@ -0,0 +1,18 @@
+ï»¿using System.Reflection;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(ParameterInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Reflection_ParameterInfo
+    {
+    }
+
+    [JSProxy(typeof(EventInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Reflection_EventInfo
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.IO.cs b/Proxies/BCL/JSIL.IO.cs
new file mode 100644
index 0000000..0b44a6b
--- /dev/null
+++ b/Proxies/BCL/JSIL.IO.cs
@@ -0,0 +1,84 @@
+ï»¿using System.IO;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(File), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_File
+    {
+    }
+
+    [JSProxy(typeof (Path), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared,JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_Path
+    {
+    }
+
+    [JSProxy(typeof(Stream), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_Stream
+    {
+    }
+
+    [JSProxy(typeof(FileStream), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileStream
+    {
+    }
+
+    [JSProxy(typeof(MemoryStream), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_MemoryStream
+    {
+    }
+
+    [JSProxy(typeof(BinaryWriter), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_BinaryWriter
+    {
+    }
+
+    [JSProxy(typeof(BinaryReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_BinaryReader
+    {
+    }
+
+    [JSProxy(typeof(StreamReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_StreamReader
+    {
+    }
+
+    [JSProxy(typeof(TextReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_TextReader
+    {
+    }
+
+    [JSProxy(typeof(FileSystemInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileSystemInfo
+    {
+    }
+
+    [JSProxy(typeof(DirectoryInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_DirectoryInfo
+    {
+    }
+
+    [JSProxy(typeof(FileInfo), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_FileInfo
+    {
+    }
+
+    [JSProxy(typeof(Directory), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_IO_Directory
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.Unsafe.cs b/Proxies/BCL/JSIL.Unsafe.cs
new file mode 100644
index 0000000..0d89d47
--- /dev/null
+++ b/Proxies/BCL/JSIL.Unsafe.cs
@@ -0,0 +1,25 @@
+ï»¿using System;
+using System.Runtime.InteropServices;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(Marshal), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Runtime_InteropServices_Marshal
+    {
+    }
+
+    [JSProxy(typeof(GCHandle), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Runtime_InteropServices_GCHandle
+    {
+    }
+
+    [JSProxy(typeof(Buffer), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Buffer
+    {
+    }
+}
diff --git a/Proxies/BCL/JSIL.XML.cs b/Proxies/BCL/JSIL.XML.cs
new file mode 100644
index 0000000..f8c5855
--- /dev/null
+++ b/Proxies/BCL/JSIL.XML.cs
@@ -0,0 +1,43 @@
+ï»¿using System.Xml;
+using System.Xml.Serialization;
+using JSIL.Meta;
+using JSIL.Proxy;
+
+namespace JSIL.Proxies.Bcl
+{
+    [JSProxy(typeof(XmlSerializationReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_Serialization_XmlSerializationReader
+    {
+    }
+
+    [JSProxy(typeof(XmlQualifiedName), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlQualifiedName
+    {
+    }
+
+    [JSProxy(typeof(XmlReader), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlReader
+    {
+    }
+
+    [JSProxy(typeof(XmlNameTable), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlNameTable
+    {
+    }
+
+    [JSProxy(typeof(XmlConvert), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlConvert
+    {
+    }
+
+    [JSProxy(typeof(XmlWriter), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSStubOnly]
+    public class System_Xml_XmlWriter
+    {
+    }
+}
\ No newline at end of file
diff --git a/Proxies/BCL/Properties/AssemblyInfo.cs b/Proxies/BCL/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..ab2672e
--- /dev/null
+++ b/Proxies/BCL/Properties/AssemblyInfo.cs
@@ -0,0 +1,36 @@
+ï»¿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following 
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("JSIL Proxies BLC")]
+[assembly: AssemblyDescription("JSIL Standard Type Proxies for BCL assemblies")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("Squared Interactive")]
+[assembly: AssemblyProduct("JSIL")]
+[assembly: AssemblyCopyright("Copyright Â© Squared Interactive 2011")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible 
+// to COM components.  If you need to access a type in this assembly from 
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("8BB79C50-0821-4C59-AFF8-21F25591F0E4")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version 
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers 
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/Proxies/BCL/Proxies.Bcl.csproj b/Proxies/BCL/Proxies.Bcl.csproj
new file mode 100644
index 0000000..513f1c4
--- /dev/null
+++ b/Proxies/BCL/Proxies.Bcl.csproj
@@ -0,0 +1,64 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProductVersion>8.0.30703</ProductVersion>
+    <SchemaVersion>2.0</SchemaVersion>
+    <ProjectGuid>{261C3CF3-D25E-4F17-8973-5D0F761FE422}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>JSIL.Proxies.Bcl</RootNamespace>
+    <AssemblyName>JSIL.Proxies.Bcl</AssemblyName>
+    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>..\..\bin\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>..\..\bin\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="JSIL.Bootstrap.cs" />
+    <Compile Include="JSIL.Bootstrap.DateTime.cs" />
+    <Compile Include="JSIL.Bootstrap.Linq.cs" />
+    <Compile Include="JSIL.Bootstrap.Resources.cs" />
+    <Compile Include="JSIL.Bootstrap.Text.cs" />
+    <Compile Include="JSIL.Core.Reflection.cs" />
+    <Compile Include="JSIL.IO.cs" />
+    <Compile Include="JSIL.Unsafe.cs" />
+    <Compile Include="JSIL.XML.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\..\Meta\Meta.csproj">
+      <Project>{37C67C73-1F58-49B8-A39E-768AC88C2447}</Project>
+      <Name>Meta</Name>
+      <Private>True</Private>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
+       Other similar extension points exist, see Microsoft.Common.targets.
+  <Target Name="BeforeBuild">
+  </Target>
+  <Target Name="AfterBuild">
+  </Target>
+  -->
+</Project>
\ No newline at end of file
-- 
1.9.3


From 6cfd7e27b2a60fff691e0a951316972b3491988d Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 15:07:41 -0700
Subject: [PATCH 2/4] Included Proxies.Bcl to release build.

---
 JSIL.sln       | 1 +
 JSIL_NoXNA.sln | 1 +
 2 files changed, 2 insertions(+)

diff --git a/JSIL.sln b/JSIL.sln
index 0bb663e..9fed407 100644
--- a/JSIL.sln
+++ b/JSIL.sln
@@ -179,6 +179,7 @@ Global
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/JSIL_NoXNA.sln b/JSIL_NoXNA.sln
index 95462f4..6c5c469 100644
--- a/JSIL_NoXNA.sln
+++ b/JSIL_NoXNA.sln
@@ -146,6 +146,7 @@ Global
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|Any CPU.Build.0 = Release|Any CPU
 		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.ActiveCfg = Release|Any CPU
+		{261C3CF3-D25E-4F17-8973-5D0F761FE422}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
-- 
1.9.3


From 4fb2f8bc9a016efea3f8e7f4bd8c08e6a2fc2d3d Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 17:33:03 -0700
Subject: [PATCH 3/4] BCL proxies cleaned up and update for last JSIL changes.

--HG--
extra : source : a606c3916eae40d19a64ef596d090dbffd1bc91e
---
 Proxies/BCL/JSIL.Bootstrap.DateTime.cs  | 41 ++++++++++++++++++++-------------
 Proxies/BCL/JSIL.Bootstrap.Resources.cs | 20 ++++++++--------
 Proxies/BCL/JSIL.Bootstrap.cs           | 26 +++++++++++----------
 3 files changed, 49 insertions(+), 38 deletions(-)

diff --git a/Proxies/BCL/JSIL.Bootstrap.DateTime.cs b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
index 2c32b1f..fbc7df3 100644
--- a/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.DateTime.cs
@@ -39,7 +39,7 @@ public static TimeSpan FromDays(double value)
         }
 
         [JSExternal]
-        public static System.TimeSpan FromTicks(long value)
+        public static TimeSpan FromTicks(long value)
         {
             throw new NotImplementedException();
         }
@@ -99,122 +99,126 @@ public static System.TimeSpan FromTicks(long value)
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(long ticks)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(int hours, int minutes, int seconds)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(int days, int hours, int minutes, int seconds)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds)
         {
             throw new NotImplementedException();
         }
 
-        [JSExternal]
         public int Days
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Hours 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Milliseconds 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Minutes 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public int Seconds 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public long Ticks
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalMilliseconds
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalSeconds  
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalMinutes 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalHours 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public double TotalDays 
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
@@ -238,40 +242,45 @@ public override string ToString()
     public class System_DateTime
     {
         [JSExternal]
+        [JSReplaceConstructor]
         public System_DateTime(long ticks)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         private System_DateTime(ulong dateData)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_DateTime(int year, int month, int day)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
+        [JSReplaceConstructor]
         public System_DateTime(int year, int month, int day, Calendar calendar)
         {
             throw new NotImplementedException();
         }
 
-        [JSExternal]
-        public static System.DateTime Now
+        public static DateTime Now
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
-        public static System.DateTime UtcNow { 
+        public static DateTime UtcNow
+        {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
diff --git a/Proxies/BCL/JSIL.Bootstrap.Resources.cs b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
index 5243248..43c0e0d 100644
--- a/Proxies/BCL/JSIL.Bootstrap.Resources.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.Resources.cs
@@ -41,27 +41,27 @@ public virtual object Clone()
             throw new NotImplementedException();
         }
 
-        [JSExternal]
         public string Name
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public string TwoLetterISOLanguageName
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
         public bool UseUserOverride
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
@@ -69,35 +69,35 @@ public bool UseUserOverride
         }
 
         [JSExternal]
-        public CultureInfo GetCultureByName(string str, bool boolean)
+        private static CultureInfo GetCultureByName(string str, bool boolean)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
-        public CultureInfo GetCultureInfo(string str)
+        public static CultureInfo GetCultureInfo(string str)
         {
             throw new NotImplementedException();
         }
 
         [JSExternal]
-        public CultureInfo GetCultureInfoByIetfLanguageTag(string str)
+        public static CultureInfo GetCultureInfoByIetfLanguageTag(string str)
         {
             throw new NotImplementedException();
         }
 
-        [JSExternal]
-        public CultureInfo CurrentUICulture
+        public static CultureInfo CurrentUICulture
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
             }
         }
 
-        [JSExternal]
-        public CultureInfo CurrentCulture
+        public static CultureInfo CurrentCulture
         {
+            [JSExternal]
             get
             {
                 throw new NotImplementedException();
diff --git a/Proxies/BCL/JSIL.Bootstrap.cs b/Proxies/BCL/JSIL.Bootstrap.cs
index 544e41c..53a2364 100644
--- a/Proxies/BCL/JSIL.Bootstrap.cs
+++ b/Proxies/BCL/JSIL.Bootstrap.cs
@@ -1,5 +1,7 @@
 ï»¿using System;
 using System.Collections;
+using System.Collections.Generic;
+using System.Collections.ObjectModel;
 using System.Diagnostics;
 using System.IO;
 using System.Threading;
@@ -63,7 +65,7 @@ public class System_Threading_Thread
     {
     }
 
-    [JSProxy("System.Collections.Generic.List`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(List<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_List_1
     {
@@ -75,26 +77,26 @@ public class System_Collections_ArrayList
     {
     }
 
-    [JSProxy("System.Collections.ObjectModel.Collection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Collection<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_ObjectModel_Collection_1
     {
     }
 
-    [JSProxy("System.Collections.ObjectModel.ReadOnlyCollection`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(ReadOnlyCollection<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_ObjectModel_ReadOnlyCollection_1
     {
     }
 
 
-    [JSProxy("System.Collections.Generic.Stack`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Stack<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Stack_1
     {
     }
 
-    [JSProxy("System.Collections.Generic.Queue`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Queue<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Queue_1
     {
@@ -130,13 +132,13 @@ public static class System_Environment
     {
     }
 
-    [JSProxy("System.Collections.Generic.Dictionary`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Dictionary<,>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Dictionary_2
     {
     }
 
-    [JSProxy("System.Collections.Generic.KeyValuePair`2", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(KeyValuePair<,>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_KeyValuePair_2
     {
@@ -148,7 +150,7 @@ public static class System_Nullable
     {
     }
 
-    [JSProxy("System.Nullable`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Nullable<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Nullable_1
     {
@@ -196,7 +198,7 @@ public class System_GC
     {
     }
 
-    [JSProxy("System.Collections.Generic.HashSet`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(HashSet<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_HashSet_1
     {
@@ -214,19 +216,19 @@ public static class System_BitConverter
     {
     }
 
-    [JSProxy("System.Collections.Generic.LinkedList`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(LinkedList<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public static class System_Collections_Generic_LinkedList_1
     {
     }
 
-    [JSProxy("System.Collections.Generic.LinkedListNode`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(LinkedListNode<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public static class System_Collections_Generic_LinkedListNode_1
     {
     }
 
-    [JSProxy("System.Collections.Generic.Comparer`1", JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
+    [JSProxy(typeof(Comparer<>), JSProxyMemberPolicy.ReplaceNone, JSProxyAttributePolicy.ReplaceDeclared, JSProxyInterfacePolicy.ReplaceNone, false)]
     [JSStubOnly]
     public class System_Collections_Generic_Comparer_1
     {
-- 
1.9.3


From b25f43dcfadd846c4a9762cbd7b59d62c718a2e4 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Tue, 27 May 2014 20:33:49 -0700
Subject: [PATCH 4/4] Added SimpleTestCasesSourceForTranslatedBcl (empty yet).
 It runs test with translated mscorlib and System.Core using Proxies.Bcl and
 throwOnUnimplementedExternals=false.

--HG--
extra : source : 94809eace594d8e859cc6a9c50cb0b570554f283
extra : amend_source : c45207921eb28d5b2632ed041bc16cf2b2aa20a8
---
 Libraries/JSIL.Shell.js     |  4 ++--
 Tests/ComparisonTest.cs     | 16 +++++++++++-----
 Tests/ComparisonTests.cs    | 40 +++++++++++++++++++++++++++++++++++++++-
 Tests/GenericTestFixture.cs |  9 ++++++---
 test_runner.html            |  4 ++--
 5 files changed, 60 insertions(+), 13 deletions(-)

diff --git a/Libraries/JSIL.Shell.js b/Libraries/JSIL.Shell.js
index c40de14..d3ba5b8 100644
--- a/Libraries/JSIL.Shell.js
+++ b/Libraries/JSIL.Shell.js
@@ -150,9 +150,9 @@ JSIL.Shell.TagObject = function (obj, tag) {
   }
 };
 
-JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args) {
+JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args, throwOnUnimplementedExternals) {
   return function runTestCase (dateNow) {
-    JSIL.ThrowOnUnimplementedExternals = true;
+    JSIL.ThrowOnUnimplementedExternals = throwOnUnimplementedExternals;
 
     timeout(timeoutDuration);
 
diff --git a/Tests/ComparisonTest.cs b/Tests/ComparisonTest.cs
index ed05f6c..38cb06c 100644
--- a/Tests/ComparisonTest.cs
+++ b/Tests/ComparisonTest.cs
@@ -418,6 +418,7 @@ public static bool IsLinux
         public string GenerateJavascript (
             string[] args, out string generatedJavascript, out long elapsedTranslation,
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null
         ) {
             var translationStarted = DateTime.UtcNow.Ticks;
@@ -468,12 +469,13 @@ public static bool IsLinux
             }
 
             var invocationJs = String.Format(
-                "runTestCase = JSIL.Shell.TestPrologue(\r\n  {0}, \r\n  {1}, \r\n  {2}, \r\n  {3}, \r\n  {4}\r\n);",
+                "runTestCase = JSIL.Shell.TestPrologue(\r\n  {0}, \r\n  {1}, \r\n  {2}, \r\n  {3}, \r\n  {4}, \r\n  {5}\r\n);",
                 JavascriptExecutionTimeout,
                 Util.EscapeString(testAssemblyName),
                 Util.EscapeString(testTypeName), 
                 Util.EscapeString(testMethodName),
-                argsJson
+                argsJson,
+                throwOnUnimplementedExternals ? "true" : "false"
             );
 
             generatedJavascript = translatedJs;
@@ -498,25 +500,27 @@ public static bool IsLinux
             string temp1, temp4, temp5;
             long temp2, temp3;
 
-            return RunJavascript(args, out temp1, out temp2, out temp3, out temp4, out temp5, makeConfiguration, onTranslationFailure);
+            return RunJavascript(args, out temp1, out temp2, out temp3, out temp4, out temp5, makeConfiguration, true, onTranslationFailure);
         }
 
         public string RunJavascript (
             string[] args, out string generatedJavascript, out long elapsedTranslation, out long elapsedJs,
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null
         ) {
             string temp1, temp2;
 
-            return RunJavascript(args, out generatedJavascript, out elapsedTranslation, out elapsedJs, out temp1, out temp2, makeConfiguration, onTranslationFailure);
+            return RunJavascript(args, out generatedJavascript, out elapsedTranslation, out elapsedJs, out temp1, out temp2, makeConfiguration, throwOnUnimplementedExternals, onTranslationFailure);
         }
 
         public string RunJavascript (
             string[] args, out string generatedJavascript, out long elapsedTranslation, out long elapsedJs, out string stderr, out string trailingOutput,
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null
         ) {
-            var tempFilename = GenerateJavascript(args, out generatedJavascript, out elapsedTranslation, makeConfiguration, onTranslationFailure);
+            var tempFilename = GenerateJavascript(args, out generatedJavascript, out elapsedTranslation, makeConfiguration, throwOnUnimplementedExternals, onTranslationFailure);
 
             using (var evaluator = EvaluatorPool.Get()) {
                 var startedJs = DateTime.UtcNow.Ticks;
@@ -604,6 +608,7 @@ public static bool IsLinux
         public void Run (
             string[] args = null, 
             Func<Configuration> makeConfiguration = null, 
+            bool throwOnUnimplementedExternals = true,
             bool dumpJsOnFailure = true,
             Action<Exception> onTranslationFailure = null
         ) {
@@ -640,6 +645,7 @@ public static bool IsLinux
                     outputs[1] = RunJavascript(
                         args, out generatedJs[0], out elapsed[1], out elapsed[2], 
                         makeConfiguration: makeConfiguration,
+                        throwOnUnimplementedExternals: throwOnUnimplementedExternals,
                         onTranslationFailure: onTranslationFailure
                     ).Replace("\r", "").Trim();
                 } catch (Exception ex) {
diff --git a/Tests/ComparisonTests.cs b/Tests/ComparisonTests.cs
index d35666d..bd9223d 100644
--- a/Tests/ComparisonTests.cs
+++ b/Tests/ComparisonTests.cs
@@ -8,6 +8,7 @@
 using System.Text;
 using System.Threading;
 using JSIL.Internal;
+using JSIL.Translator;
 using NUnit.Framework;
 
 namespace JSIL.Tests {
@@ -517,11 +518,48 @@ public class ComparisonTests : GenericTestFixture {
             RunSingleComparisonTestCase(parameters);
         }
 
-        protected IEnumerable<TestCaseData> SimpleTestCasesSource () {
+        protected IEnumerable<TestCaseData> SimpleTestCasesSource()
+        {
             return FolderTestSource("SimpleTestCases", MakeDefaultProvider(), new AssemblyCache());
         }
 
         [Test]
+        [TestCaseSource("SimpleTestCasesSourceForTranslatedBcl")]
+        public void SimpleTestCasesForTranslatedBcl(object[] parameters)
+        {
+            RunSingleComparisonTestCase(parameters, () =>
+                {
+                    var c = new Configuration
+                        {
+                            ApplyDefaults = false,
+                        };
+                    c.Assemblies.Stubbed.Add("^System,");
+                    c.Assemblies.Stubbed.Add("^System\\.(?!Core)(.+),");
+                    c.Assemblies.Stubbed.Add("^Microsoft\\.(.+),");
+                    c.Assemblies.Stubbed.Add("FSharp.Core,");
+
+                    c.Assemblies.Ignored.Add("Microsoft\\.VisualC,");
+                    c.Assemblies.Ignored.Add("Accessibility,");
+                    c.Assemblies.Ignored.Add("SMDiagnostics,");
+                    c.Assemblies.Ignored.Add("System\\.EnterpriseServices,");
+                    c.Assemblies.Ignored.Add("System\\.Security,");
+                    c.Assemblies.Ignored.Add("System\\.Runtime\\.Serialization\\.Formatters\\.Soap,");
+                    c.Assemblies.Ignored.Add("System\\.Runtime\\.DurableInstancing,");
+                    c.Assemblies.Ignored.Add("System\\.Data\\.SqlXml,");
+                    c.Assemblies.Ignored.Add("JSIL\\.Meta,");
+
+                    c.Assemblies.Proxies.Add("JSIL.Proxies.Bcl.dll");
+                    return c;
+                },
+                false);
+        }
+
+        protected IEnumerable<TestCaseData> SimpleTestCasesSourceForTranslatedBcl()
+        {
+            return FolderTestSource("SimpleTestCasesForTranslatedBcl", null, new AssemblyCache());
+        }
+
+        [Test]
         [TestCaseSource("JSTestCasesSource")]
         public void JSTestCases (object[] parameters) {
             RunSingleComparisonTestCase(parameters);
diff --git a/Tests/GenericTestFixture.cs b/Tests/GenericTestFixture.cs
index 4e7242d..f7097d7 100644
--- a/Tests/GenericTestFixture.cs
+++ b/Tests/GenericTestFixture.cs
@@ -205,6 +205,7 @@ public class GenericTestFixture : IDisposable {
             string filename, string[] stubbedAssemblies = null, TypeInfoProvider typeInfo = null, Action<string, string> errorCheckPredicate = null,
             List<string> failureList = null, string commonFile = null, bool shouldRunJs = true, AssemblyCache asmCache = null,
             Func<Configuration> makeConfiguration = null, Action<Exception> onTranslationFailure = null,
+            bool throwOnUnimplementedExternals = true,
             string compilerOptions = ""
         ) {
             CompileResult result = null;
@@ -229,13 +230,13 @@ public class GenericTestFixture : IDisposable {
                     result = test.CompileResult;
 
                     if (shouldRunJs) {
-                        test.Run(makeConfiguration: makeConfiguration, onTranslationFailure: onTranslationFailure);
+                        test.Run(makeConfiguration: makeConfiguration, throwOnUnimplementedExternals: throwOnUnimplementedExternals, onTranslationFailure: onTranslationFailure);
                     } else {
                         string js;
                         long elapsed;
                         try {
-                            var csOutput = test.RunCSharp(new string[0], out elapsed);
-                            test.GenerateJavascript(new string[0], out js, out elapsed, makeConfiguration, onTranslationFailure);
+                            var csOutput = test.RunCSharp(new string[0], out elapsed);
+                            test.GenerateJavascript(new string[0], out js, out elapsed, makeConfiguration, throwOnUnimplementedExternals, onTranslationFailure);
 
                             Console.WriteLine("generated");
 
@@ -351,6 +352,7 @@ public class GenericTestFixture : IDisposable {
         protected CompileResult RunSingleComparisonTestCase (
             object[] parameters, 
             Func<Configuration> makeConfiguration = null,
+            bool throwOnUnimplementedExternals = true,
             Action<Exception> onTranslationFailure = null,
             string compilerOptions = ""
         ) {
@@ -363,6 +365,7 @@ public class GenericTestFixture : IDisposable {
                 return RunComparisonTest(
                     (string)parameters[0], null, provider, null, null, (string)parameters[3], true, cache,
                     makeConfiguration: makeConfiguration,
+                    throwOnUnimplementedExternals: throwOnUnimplementedExternals,
                     onTranslationFailure: onTranslationFailure,
                     compilerOptions: compilerOptions
                 );
diff --git a/test_runner.html b/test_runner.html
index 45ab71b..362e07f 100644
--- a/test_runner.html
+++ b/test_runner.html
@@ -99,9 +99,9 @@
 
       JSIL.Shell = {};
 
-      JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args) {
+      JSIL.Shell.TestPrologue = function (timeoutDuration, assemblyName, typeName, methodName, args, throwOnUnimplementedExternals) {
         return function runTestCase () {
-          JSIL.ThrowOnUnimplementedExternals = true;
+          JSIL.ThrowOnUnimplementedExternals = throwOnUnimplementedExternals;
 
           var started = Date.now();
 
-- 
1.9.3

