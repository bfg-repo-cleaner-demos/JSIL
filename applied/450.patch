From afd55733063d55b4fee095514ffce0532abce986 Mon Sep 17 00:00:00 2001
From: Igor Kostromin <elwood.su@gmail.com>
Date: Sat, 26 Apr 2014 21:16:56 +0400
Subject: [PATCH] Added EventArgs default ctor, PropertyChangedEventArgs
 implementation, CultureInfo.InvariantCulture and some methods from IList.*.

---
 Libraries/JSIL.Bootstrap.Resources.js | 10 +++++
 Libraries/JSIL.Bootstrap.js           | 69 +++++++++++++++++++++++++++++++++--
 2 files changed, 75 insertions(+), 4 deletions(-)

diff --git a/Libraries/JSIL.Bootstrap.Resources.js b/Libraries/JSIL.Bootstrap.Resources.js
index 415ad09..1fa4ab2 100644
--- a/Libraries/JSIL.Bootstrap.Resources.js
+++ b/Libraries/JSIL.Bootstrap.Resources.js
@@ -209,6 +209,16 @@ JSIL.ImplementExternals("System.Globalization.CultureInfo", function ($) {
     }
   );
 
+  $.Method({Static: true, Public: true}, "get_InvariantCulture",
+    new JSIL.MethodSignature($jsilcore.TypeRef("System.Globalization.CultureInfo"), [], []),
+    function() {
+      if (typeof this.m_invariantCultureInfo == 'undefined') {
+         this.m_invariantCultureInfo = new System.Globalization.CultureInfo('', false);
+      }
+      return this.m_invariantCultureInfo;
+    }
+  );
+
   $.Method({Static:false, Public:true }, "Clone", 
     (new JSIL.MethodSignature($.Object, [], [])), 
     function get_Name () {
diff --git a/Libraries/JSIL.Bootstrap.js b/Libraries/JSIL.Bootstrap.js
index d395be7..a08222a 100644
--- a/Libraries/JSIL.Bootstrap.js
+++ b/Libraries/JSIL.Bootstrap.js
@@ -983,6 +983,15 @@ $jsilcore.$ListExternals = function ($, T, type) {
       break;
   }
 
+  $.Method(
+	  // A method doesn't have to be public to implement an interface
+	  {Static: false, Public: false }, 
+	  // Passing null for the name makes the method anonymous
+	  null,
+	  new JSIL.MethodSignature($.Int32, [$.Object], []),
+	  addImpl
+  ).Overrides("System.Collections.IList", "Add");
+
   $.Method({Static:false, Public:true }, "AddRange", 
     new JSIL.MethodSignature(null, [mscorlib.TypeRef("System.Collections.Generic.IEnumerable`1", [T])], []),
     function (items) {
@@ -1105,16 +1114,27 @@ $jsilcore.$ListExternals = function ($, T, type) {
     return (index >= 0) && (size > index);
   }
 
-  $.Method({Static:false, Public:true }, "get_Item", 
-    new JSIL.MethodSignature(T, [mscorlib.TypeRef("System.Int32")], []), 
-    function (index) {
+  var getItemImpl = function (index) {
       if (rangeCheckImpl(index, this._size))
         return this._items[index];
       else
         throw new System.ArgumentOutOfRangeException("index");
-    }
+    };
+
+  $.Method({Static:false, Public:true }, "get_Item", 
+    new JSIL.MethodSignature(T, [mscorlib.TypeRef("System.Int32")], []), 
+    getItemImpl
   );
 
+  $.Method(
+	  // A method doesn't have to be public to implement an interface
+	  {Static: false, Public: false }, 
+	  // Passing null for the name makes the method anonymous
+	  null,
+	  new JSIL.MethodSignature($.Object, [$.Int32], []),
+	  getItemImpl
+	).Overrides("System.Collections.IList", "get_Item");
+
   $.Method({Static: false, Public: true }, "set_Item",
     new JSIL.MethodSignature(null, [mscorlib.TypeRef("System.Int32"), T], []), 
     function (index, value) {
@@ -1182,11 +1202,23 @@ $jsilcore.$ListExternals = function ($, T, type) {
     }
   );
 
+  $.Method({Static: false, Public: false}, null,
+	  new JSIL.MethodSignature(null, [$.Int32, $.Object], []),
+	  function (index, item) {
+        this.InsertItem(index, item);
+      }
+  ).Overrides("System.Collections.IList", "Insert");
+
   $.Method({Static:false, Public:true }, "IndexOf", 
     new JSIL.MethodSignature(mscorlib.TypeRef("System.Int32"), [T], []),
     indexOfImpl
   );
 
+  $.Method({Static:false,Public:false}, null,
+	  new JSIL.MethodSignature($.Int32, [$.Object], []),
+	  indexOfImpl
+	  ).Overrides("System.Collections.IList", "IndexOf");
+
   var removeImpl = function (item) {
     var index = this._items.indexOf(item);
     if (index === -1)
@@ -1212,6 +1244,11 @@ $jsilcore.$ListExternals = function ($, T, type) {
       break;
   }
 
+  $.Method({Static: false, Public: false}, null,
+	  new JSIL.MethodSignature(null, [$.Object], []),
+	  removeImpl
+	  ).Overrides("System.Collections.IList", "Remove");
+
   $.Method({Static:false, Public:true }, "RemoveAll", 
     new JSIL.MethodSignature(mscorlib.TypeRef("System.Int32"), [mscorlib.TypeRef("System.Predicate`1", [T])], []),
     function (predicate) {
@@ -3410,6 +3447,30 @@ JSIL.MakeStruct("System.ValueType", "System.EventArgs", true, [], function ($) {
   });
 });
 
+JSIL.ImplementExternals("System.EventArgs", function ($) {
+	$.Method({Static: false, Public: true}, ".ctor",
+	new JSIL.MethodSignature(null, [], []),
+	function() {
+    }
+  );
+});
+
+JSIL.ImplementExternals("System.ComponentModel.PropertyChangedEventArgs", function ($) {
+  $.Method({Static: false, Public: true}, ".ctor",
+	new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.String")], []),
+	function(propertyName) {
+		this.propertyName = propertyName;
+    }
+  );
+
+  $.Method({Static: false, Public: true, Virtual:true}, "get_PropertyName",
+	new JSIL.MethodSignature($.String, [], []),
+	function() {
+		return this.propertyName;
+    }
+  );
+});
+
 JSIL.ImplementExternals("System.Diagnostics.Debug", function ($) {
 
   $.Method({Static:true , Public:true }, "Assert", 
-- 
1.9.3

