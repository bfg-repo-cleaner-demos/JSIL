From 71ece40db18af8ff6d8febde8d42d8e19e1eb2d0 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Sun, 11 May 2014 16:37:59 -0700
Subject: [PATCH] Reflection type Generic information properties fixed.

--HG--
extra : source : dea6ca7686321354bd500c63dde980da8f81cef9
extra : amend_source : df60b530b5990e7910208356f5770760d03f20e6
---
 Libraries/JSIL.Core.Reflection.js                  |  6 +++
 Libraries/JSIL.Core.js                             |  7 ++-
 Tests/SimpleTestCases/ReflectionTypeGenericInfo.cs | 58 ++++++++++++++++++++++
 Tests/Tests.csproj                                 |  1 +
 4 files changed, 70 insertions(+), 2 deletions(-)
 create mode 100644 Tests/SimpleTestCases/ReflectionTypeGenericInfo.cs

diff --git a/Libraries/JSIL.Core.Reflection.js b/Libraries/JSIL.Core.Reflection.js
index 27e0b3c..f70a761 100644
--- a/Libraries/JSIL.Core.Reflection.js
+++ b/Libraries/JSIL.Core.Reflection.js
@@ -66,6 +66,11 @@ JSIL.ImplementExternals(
       new JSIL.MethodSignature($.Boolean, []),
       JSIL.TypeObjectPrototype.get_IsGenericTypeDefinition
     );
+
+    $.Method({Static:false, Public:true }, "get_ContainsGenericParameters",
+      new JSIL.MethodSignature($.Boolean, []),
+      JSIL.TypeObjectPrototype.get_ContainsGenericParameters
+    );
     
     $.Method({Static:false, Public:true }, "GetGenericTypeDefinition",
       (new JSIL.MethodSignature($.Type, [], [])),
@@ -908,6 +913,7 @@ JSIL.MakeClass("System.Reflection.MemberInfo", "System.Type", true, [], function
     $.Property({Public: true , Static: false, Virtual: true }, "BaseType");
     $.Property({Public: true , Static: false, Virtual: true }, "IsGenericType");
     $.Property({Public: true , Static: false, Virtual: true }, "IsGenericTypeDefinition");
+    $.Property({Public: true , Static: false, Virtual: true }, "ContainsGenericParameters");
     $.Property({Public: true , Static: false }, "IsArray");
     $.Property({Public: true , Static: false }, "IsValueType");
     $.Property({Public: true , Static: false }, "IsEnum");
diff --git a/Libraries/JSIL.Core.js b/Libraries/JSIL.Core.js
index dfe624f..1d02cda 100644
--- a/Libraries/JSIL.Core.js
+++ b/Libraries/JSIL.Core.js
@@ -343,11 +343,14 @@ JSIL.$GetSpecialType = function (name) {
   JSIL.TypeObjectPrototype.get_IsEnum = function() { 
     return this.__IsEnum__; 
   };
+  JSIL.TypeObjectPrototype.get_ContainsGenericParameters = function() { 
+    return this.__IsClosed__ === false; 
+  };
   JSIL.TypeObjectPrototype.get_IsGenericType = function() { 
-    return this.__OpenType__ !== undefined || this.__IsClosed__ === false; 
+    return (this.__OpenType__ !== undefined || this.__IsClosed__ === false) && !(this instanceof JSIL.GenericParameter); 
   };
   JSIL.TypeObjectPrototype.get_IsGenericTypeDefinition = function() { 
-    return this.__IsClosed__ === false; 
+    return this.__IsClosed__ === false && this.__GenericArgumentValues__ === undefined && !(this instanceof JSIL.GenericParameter); 
   };
   JSIL.TypeObjectPrototype.get_IsValueType = function() { 
     return this.__IsValueType__; 
diff --git a/Tests/SimpleTestCases/ReflectionTypeGenericInfo.cs b/Tests/SimpleTestCases/ReflectionTypeGenericInfo.cs
new file mode 100644
index 0000000..d66a6d9
--- /dev/null
+++ b/Tests/SimpleTestCases/ReflectionTypeGenericInfo.cs
@@ -0,0 +1,58 @@
+ï»¿using System;
+using System.Linq.Expressions;
+
+public static class Program
+{
+    public static void Main()
+    {
+        Write(typeof(Base<,>), 1);
+        Write(typeof(Derived<>), 2);
+        Write(typeof(Derived<>).BaseType, 3);
+        Write(typeof(Derived<>).GetField("Field1").FieldType, 4);
+        Write(typeof(Derived<>).GetField("Field2").FieldType, 5);
+        Write(typeof(Derived<>).GetField("Field3").FieldType, 6);
+        Write(typeof(Derived<>.Nested), 7);
+
+        Write(typeof(Base<SomeClass, SomeClass>), 8);
+        Write(typeof(Derived<SomeClass>), 9);
+        Write(typeof(Derived<SomeClass>).BaseType, 10);
+        Write(typeof(Derived<SomeClass>).GetField("Field1").FieldType, 11);
+        Write(typeof(Derived<SomeClass>).GetField("Field2").FieldType, 12);
+        Write(typeof(Derived<SomeClass>).GetField("Field3").FieldType, 13);
+        Write(typeof(Derived<SomeClass>.Nested), 14);
+        Write(typeof(Derived<SomeClass>[]), 15);
+    }
+
+    public static void Write(Type type, int index)
+    {
+        Console.WriteLine(index);
+        Console.WriteLine("IsGenericType: {0}", type.IsGenericType);
+        Console.WriteLine("IsGenericTypeDefinition: {0}", type.IsGenericTypeDefinition);
+        Console.WriteLine("ContainsGenericParameters: {0}", type.ContainsGenericParameters);
+        Console.WriteLine("IsGenericParameter: {0}", type.IsGenericParameter);
+    }
+}
+
+public class Base<T, U>
+{
+    public static T M1Base(U u) { return default(T); }
+}
+
+public class Derived<V> : Base<SomeClass, V>
+{
+    public V Field1;
+    public G<V> Field2;
+    public G<G<V>> Field3;
+
+
+    public class Nested
+    {
+        void M1Nested() { }
+    }
+
+    public static void M1Derived<W>() { }
+}
+
+public class G<T> { }
+
+public class SomeClass {}
\ No newline at end of file
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index 6a839ab..ad2cdb9 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -853,6 +853,7 @@
     <None Include="SimpleTestCases\Issue364_1.cs" />
     <None Include="SimpleTestCases\Issue364_2.cs" />
     <None Include="SimpleTestCases\Issue364_3.cs" />
+    <None Include="SimpleTestCases\ReflectionTypeGenericInfo.cs" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\JSIL\JSIL.csproj">
-- 
1.9.3

