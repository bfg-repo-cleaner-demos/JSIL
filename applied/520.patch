From 9382a11c733f90541a985ad2988d51125a615fa6 Mon Sep 17 00:00:00 2001
From: ik <igor@kiselev.spb.ru>
Date: Mon, 2 Jun 2014 22:30:32 -0700
Subject: [PATCH] Added MemberInfo.MemberType.

--HG--
extra : source : a8a63a2689e74ca2e21f65ec980295071e3eeb1b
extra : amend_source : a749dbc4cc153c0aaea4d4453cb06eae01e588f1
---
 Libraries/JSIL.Core.Reflection.js             | 52 ++++++++++++++++++++++++++-
 Tests/SimpleTestCases/ReflectionMemberType.cs | 29 +++++++++++++++
 Tests/Tests.csproj                            |  1 +
 3 files changed, 81 insertions(+), 1 deletion(-)
 create mode 100644 Tests/SimpleTestCases/ReflectionMemberType.cs

diff --git a/Libraries/JSIL.Core.Reflection.js b/Libraries/JSIL.Core.Reflection.js
index f0a2ed9..fd0109e 100644
--- a/Libraries/JSIL.Core.Reflection.js
+++ b/Libraries/JSIL.Core.Reflection.js
@@ -939,6 +939,7 @@ JSIL.MakeClass("System.Object", "System.Reflection.MemberInfo", true, [], functi
     $.Property({Public: true , Static: false, Virtual: true }, "IsPublic");
     $.Property({Public: true , Static: false, Virtual: true }, "IsStatic");
     $.Property({Public: true , Static: false, Virtual: true }, "IsSpecialName");
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Type", true, [], function ($) {
@@ -965,19 +966,54 @@ JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.MethodBase", t
 
 JSIL.MakeClass("System.Reflection.MethodBase", "System.Reflection.MethodInfo", true, [], function ($) {
     $.Property({Public: true , Static: false}, "ReturnType");
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Method;
+      }
+    );	
 });
 
 JSIL.MakeClass("System.Reflection.MethodBase", "System.Reflection.ConstructorInfo", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Constructor;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.FieldInfo", true, [], function ($) {
     $.Property({Public: true , Static: false}, "FieldType");
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Field;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.EventInfo", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Event;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Reflection.MemberInfo", "System.Reflection.PropertyInfo", true, [], function ($) {
+    $.Property({Public: true , Static: false, Virtual: true }, "MemberType");
+    $.Method({Public: true , Static: false, Virtual: true }, "get_MemberType", 
+      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Reflection.MemberTypes")), 
+      function get_MemberType(){
+        return $jsilcore.System.Reflection.MemberTypes.Property;
+      }
+    );
 });
 
 JSIL.MakeClass("System.Object", "System.Reflection.Assembly", true, [], function ($) {
@@ -1326,4 +1362,18 @@ JSIL.ImplementExternals("System.Reflection.EventInfo", function ($) {
       return this.get_EventType().toString() + " " + this.Name;
     }
   );
-});
\ No newline at end of file
+});
+
+JSIL.MakeEnum(
+  "System.Reflection.MemberTypes", true, {
+    Constructor: 1, 
+    Event: 2, 
+    Field: 4, 
+    Method: 8, 
+    Property: 16, 
+    TypeInfo: 32, 
+    Custom: 64, 
+    NestedType: 128, 
+    All: 191
+  }, true
+);
\ No newline at end of file
diff --git a/Tests/SimpleTestCases/ReflectionMemberType.cs b/Tests/SimpleTestCases/ReflectionMemberType.cs
new file mode 100644
index 0000000..6c98be5
--- /dev/null
+++ b/Tests/SimpleTestCases/ReflectionMemberType.cs
@@ -0,0 +1,29 @@
+ï»¿using System;
+
+public static class Program {
+    public static void Main (string[] args)
+    {
+        Console.WriteLine(typeof(TestClass).GetConstructor(new Type[0]).MemberType);
+        Console.WriteLine(typeof(TestClass).GetField("Field").MemberType);
+        Console.WriteLine(typeof(TestClass).GetProperty("Prop").MemberType);
+        Console.WriteLine(typeof(TestClass).GetEvents()[0].MemberType);
+        Console.WriteLine(typeof(TestClass).GetMethod("Method").MemberType);
+    }
+}
+
+public class TestClass
+{
+    public TestClass()
+    {
+    }
+
+    public int Field;
+    public int Prop {
+        get { return 0; }
+    }
+    public event EventHandler Event;
+
+    public void Method()
+    {
+    }
+}
\ No newline at end of file
diff --git a/Tests/Tests.csproj b/Tests/Tests.csproj
index 31edce7..b0d7e09 100644
--- a/Tests/Tests.csproj
+++ b/Tests/Tests.csproj
@@ -452,6 +452,7 @@
     <None Include="ReflectionTestCases\FieldOrder.cs" />
     <None Include="ReflectionTestCases\GetFilteredAttributesCaching.cs" />
     <None Include="ReflectionTestCases\PropertyOrder.cs" />
+    <None Include="SimpleTestCases\ReflectionMemberType.cs" />
     <None Include="SimpleTestCases\ArrayFromInt64.cs" />
     <None Include="SimpleTestCases\FloatArrayInitializer.cs" />
     <None Include="SimpleTestCases\StaticConstructorAndFieldAccess.cs" />
-- 
1.9.3

